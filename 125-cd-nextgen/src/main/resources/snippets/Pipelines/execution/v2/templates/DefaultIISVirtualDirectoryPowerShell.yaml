template:
  name: Default ISS Virtual Directory PowerShell
  identifier: Default_ISS_Virtual_Directory_PowerShell
  description: Default Templated Step provided by Harness for Install IIS Virtual Directory Artifact using PowerShell script
  versionLabel: v1
  type: Step
  tags:
    script: powershell
    command: install
    artifactType: "ISS Virtual Directory"
    author: Harness
  spec:
    type: Command
    timeout: 10m
    spec:
      onDelegate: false
      environmentVariables:
        - name: ReleaseNo
          type: String
          value: <+input>
        - name: AppPoolName
          type: String
          value: <+input>
        - name: AppPoolDotNetVersion
          type: String
          value: <+input>
        - name: DownloadDirectory
          type: String
          value: <+input>
        - name: AppPhysicalDirectory
          type: String
          value: <+input>
        - name: DestinationDirectory
          type: String
          value: <+input>
      outputVariables: []
      commandUnits:
        - identifier: Setup_Runtime_Paths
          name: Setup Runtime Paths
          type: Script
          spec:
            shell: PowerShell
            source:
              type: Inline
              spec:
                script: |-
                  # Creates destination directory if it doesn't exist
                        $DirectoryName = "%USERPROFILE%\<+service.name>\<+env.name>"
                        If (!(Test-Path $DirectoryName)) {
                          Write-Host "Creating directory" $DirectoryName
                          New-Item $DirectoryName -ItemType Directory
                        }
        - identifier: Download_Artifact
          name: Download Artifact
          type: DownloadArtifact
          spec:
            sourceType: Artifact
            destinationPath: $env:DestinationDirectory
        - identifier: Expand_Artifact
          name: Expand Artifact
          type: Script
          spec:
            shell: PowerShell
            source:
              type: Inline
              spec:
                script: |-
                  $serviceName="<+service.name>"
                  $releaseId="$env:ReleaseNo"
                  $artifactJustFileName = Split-Path "<+artifact.artifactPath>" -leaf
                  $artifactFilename = "$HOME\<+service.name>\<+env.name>" + "\" + $artifactJustFileName
                  $appPhysicalDirectory="$env:AppPhysicalDirectory" + "\Artifacts\" + $serviceName + "\release-" + $releaseId
                  
                    # Check if artifact is File or Folder structure
                  $isFile = Test-Path -Path $artifactFilename -PathType Leaf
                  $isFolder = Test-Path -Path $artifactFilename -PathType Container
                  if ($isFile -and ([IO.Path]::GetExtension($artifactFilename) -eq ".zip" ))
                  {
                  Write-Host "Extracting package from" $artifactFilename "to" $appPhysicalDirectory
                  Expand-Archive -Path $artifactFilename -DestinationPath $appPhysicalDirectory -Force
                  }
                  else
                  {
                  Write-Host "Artifact type is not a zip file. Skipping extract."
                  }
                  if ($isFolder)
                  {
                  Write-Host "Copying folder from" $artifactFilename "to" $appPhysicalDirectory
                  Copy-Item -Path $artifactFilename -Filter "*.*" -Recurse -Destination $appPhysicalDirectory -Container
                  }
                  Write-Host "Done."
        - identifier: Copy_Config
          name: Copy Config
          type: Copy
          spec:
            sourceType: Config
            destinationPath: $env:DestinationDirectory
        - identifier: Create_Virtual_Directory
          name: Create Virtual Directory
          type: Script
          spec:
            shell: PowerShell
            source:
              type: Inline
              spec:
                script: |-
                  Import-Module WebAdministration

                  $siteName="Default Web Site"
                  $releaseId="$env:ReleaseNo"
                  $virtualDirectoryName="<+service.name>"
                  $appPhysicalDirectory="$env:AppPhysicalDirectory" + "\Artifacts\" + $virtualDirectoryName + "\release-" + $releaseId
                  
                    # Copy configs to application directory
                  $userProfile = "$env:userprofile"
                  $targetPath="$userProfile\\<+service.name>\\<+env.name>\\runtime"
                  if(!(Test-Path "$targetPath"))
                  {
                  New-Item -ItemType Directory -Path "$targetPath"
                  Write-Host "$targetPath Folder Created Successfully."
                  }
                  else
                  {
                  Write-Host "$targetPath Folder already exists."
                  }
                  Copy-Item -Path "$targetPath\\*.config" -Destination $appPhysicalDirectory -Force

                  Write-Host "Creating Virtual Directory" $virtualDirectoryName ".."
                  $VirtualDirPath = 'IIS:\Sites\' + $siteName + '\' + $virtualDirectoryName
                  if(Test-Path "$VirtualDirPath")
                  {
                  New-Item -Path $VirtualDirPath -Type VirtualDirectory -PhysicalPath $appPhysicalDirectory -Force
                  } else {
                  Write-Host "Virtual dir not found:" $VirtualDirPath
                  }

                  Write-Host "Done."