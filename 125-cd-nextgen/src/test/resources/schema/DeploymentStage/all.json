{
  "type": "object",
  "required": [
    "identifier",
    "name",
    "type"
  ],
  "properties": {
    "delegateSelectors": {
      "oneOf": [
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        {
          "type": "string",
          "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
          "minLength": 1
        }
      ]
    },
    "description": {
      "type": "string"
    },
    "failureStrategies": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/FailureStrategyConfig"
      }
    },
    "identifier": {
      "type": "string",
      "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,63}$"
    },
    "name": {
      "type": "string",
      "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$"
    },
    "skipInstances": {
      "oneOf": [
        {
          "type": "boolean"
        },
        {
          "type": "string"
        }
      ]
    },
    "strategy": {
      "$ref": "#/definitions/StrategyConfig"
    },
    "tags": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "type": {
      "type": "string",
      "enum": [
        "Deployment"
      ]
    },
    "variables": {
      "type": "array",
      "items": {
        "oneOf": [
          {
            "$ref": "#/definitions/NumberNGVariable"
          },
          {
            "$ref": "#/definitions/SecretNGVariable"
          },
          {
            "$ref": "#/definitions/StringNGVariable"
          }
        ]
      }
    },
    "when": {
      "$ref": "#/definitions/StageWhenCondition"
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "allOf": [
    {
      "if": {
        "properties": {
          "type": {
            "const": "Deployment"
          }
        }
      },
      "then": {
        "properties": {
          "spec": {
            "$ref": "#/definitions/DeploymentStageConfig"
          }
        }
      }
    }
  ],
  "definitions": {
    "AMIArtifactConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "region"
          ],
          "properties": {
            "connectorRef": {
              "type": "string",
              "minLength": 1
            },
            "filters": {
              "$ref": "#/definitions/ParameterFieldListAMIFilter"
            },
            "region": {
              "type": "string",
              "minLength": 1
            },
            "tags": {
              "$ref": "#/definitions/ParameterFieldListAMITag"
            },
            "version": {
              "type": "string"
            },
            "versionRegex": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "versionRegex"
              ]
            },
            {
              "required": [
                "version"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AMIFilter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AMITag": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AbortFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Abort"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AcrArtifactConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "registry",
            "repository",
            "subscriptionId"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "registry": {
              "type": "string"
            },
            "repository": {
              "type": "string"
            },
            "subscriptionId": {
              "type": "string"
            },
            "tag": {
              "type": "string"
            },
            "tagRegex": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "tagRegex"
              ]
            },
            {
              "required": [
                "tag"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AllHostsFilter": {
      "allOf": [
        {
          "$ref": "#/definitions/HostFilterSpec"
        },
        {
          "type": "object"
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AllowAllFilter": {
      "allOf": [
        {
          "$ref": "#/definitions/FilterSpec"
        },
        {
          "type": "object"
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AmazonS3ArtifactConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactConfig"
        },
        {
          "type": "object",
          "required": [
            "bucketName",
            "connectorRef"
          ],
          "properties": {
            "bucketName": {
              "type": "string",
              "minLength": 1
            },
            "connectorRef": {
              "type": "string"
            },
            "filePath": {
              "type": "string"
            },
            "filePathRegex": {
              "type": "string"
            },
            "region": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "filePath"
              ]
            },
            {
              "required": [
                "filePathRegex"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ApplicationSettingsConfiguration": {
      "type": "object",
      "required": [
        "store"
      ],
      "properties": {
        "metadata": {
          "type": "string"
        },
        "store": {
          "$ref": "#/definitions/StoreConfigWrapper"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ArtifactConfig": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ArtifactListConfig": {
      "type": "object",
      "properties": {
        "primary": {
          "$ref": "#/definitions/PrimaryArtifact"
        },
        "sidecars": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SidecarArtifactWrapper"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ArtifactOverrideSetWrapper": {
      "type": "object",
      "properties": {
        "overrideSet": {
          "$ref": "#/definitions/ArtifactOverrideSets"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ArtifactOverrideSets": {
      "type": "object",
      "properties": {
        "artifacts": {
          "$ref": "#/definitions/ArtifactListConfig"
        },
        "identifier": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ArtifactSource": {
      "type": "object",
      "required": [
        "identifier"
      ],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "metadata": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$"
        },
        "template": {
          "$ref": "#/definitions/TemplateLinkConfig"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "DockerRegistry",
            "Gcr",
            "Ecr",
            "Nexus3Registry",
            "Nexus2Registry",
            "ArtifactoryRegistry",
            "CustomArtifact",
            "Acr",
            "Jenkins",
            "AmazonS3",
            "GoogleArtifactRegistry",
            "GithubPackageRegistry",
            "AzureArtifacts",
            "AmazonMachineImage"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Acr"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/AcrArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AmazonMachineImage"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/AMIArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AmazonS3"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/AmazonS3ArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ArtifactoryRegistry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ArtifactoryRegistryArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AzureArtifacts"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/AzureArtifactsConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "CustomArtifact"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/CustomArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "DockerRegistry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/DockerHubArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Ecr"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/EcrArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Gcr"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/GcrArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "GithubPackageRegistry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/GithubPackagesArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "GoogleArtifactRegistry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/GoogleArtifactRegistryConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Jenkins"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/JenkinsArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Nexus2Registry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/Nexus2RegistryArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Nexus3Registry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/NexusRegistryArtifactConfig"
              }
            }
          }
        }
      ]
    },
    "ArtifactoryRegistryArtifactConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "repository",
            "repositoryFormat"
          ],
          "properties": {
            "artifactDirectory": {
              "type": "string"
            },
            "artifactPath": {
              "type": "string"
            },
            "artifactPathFilter": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "repository": {
              "type": "string"
            },
            "repositoryFormat": {
              "type": "string",
              "enum": [
                "docker",
                "generic"
              ]
            },
            "repositoryUrl": {
              "type": "string"
            },
            "tag": {
              "type": "string"
            },
            "tagRegex": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ArtifactoryStoreConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/StoreConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "repositoryName"
          ],
          "properties": {
            "artifactPaths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "connectorRef": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "repositoryName": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AsgConfigurationManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AsgInfrastructure": {
      "allOf": [
        {
          "$ref": "#/definitions/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "region"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "region": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AsgLaunchTemplateManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AsgScalingPolicyManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AsgScheduledUpdateGroupActionManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AsgServiceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ServiceSpec"
        },
        {
          "type": "object",
          "properties": { }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AutoScalerManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "skipResourceVersioning": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ParameterFieldBoolean"
                },
                {
                  "type": "string"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AwsInstanceFilter": {
      "type": "object",
      "properties": {
        "tags": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "vpcs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AzureARMRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "provisionerIdentifier"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "provisionerIdentifier": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AzureArtifactsConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "feed",
            "package",
            "packageType",
            "scope"
          ],
          "properties": {
            "connectorRef": {
              "type": "string",
              "minLength": 1
            },
            "feed": {
              "type": "string",
              "minLength": 1
            },
            "package": {
              "type": "string",
              "minLength": 1
            },
            "packageType": {
              "type": "string",
              "enum": [
                "maven",
                "nuget"
              ]
            },
            "project": {
              "type": "string"
            },
            "scope": {
              "type": "string",
              "enum": [
                "project",
                "org"
              ]
            },
            "version": {
              "type": "string"
            },
            "versionRegex": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "versionRegex"
              ]
            },
            {
              "required": [
                "version"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AzureCreateARMResourceParameterFile": {
      "type": "object",
      "required": [
        "store"
      ],
      "properties": {
        "store": {
          "$ref": "#/definitions/StoreConfigWrapper"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AzureCreateARMResourceStepConfiguration": {
      "type": "object",
      "required": [
        "connectorRef",
        "scope",
        "template"
      ],
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "parameters": {
          "$ref": "#/definitions/AzureCreateARMResourceParameterFile"
        },
        "scope": {
          "$ref": "#/definitions/AzureCreateARMResourceStepScope"
        },
        "template": {
          "$ref": "#/definitions/AzureTemplateFile"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AzureCreateARMResourceStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "configuration",
            "provisionerIdentifier"
          ],
          "properties": {
            "configuration": {
              "$ref": "#/definitions/AzureCreateARMResourceStepConfiguration"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "metadata": {
              "type": "string"
            },
            "provisionerIdentifier": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AzureCreateARMResourceStepScope": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ManagementGroup"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/AzureManagementSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ResourceGroup"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/AzureResourceGroupSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Subscription"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/AzureSubscriptionSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Tenant"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/AzureTenantSpec"
              }
            }
          }
        }
      ]
    },
    "AzureCreateBPStepConfiguration": {
      "type": "object",
      "required": [
        "connectorRef",
        "scope",
        "template"
      ],
      "properties": {
        "assignmentName": {
          "type": "string"
        },
        "connectorRef": {
          "type": "string"
        },
        "scope": {
          "type": "string",
          "enum": [
            "Subscription",
            "ManagementGroup"
          ]
        },
        "template": {
          "$ref": "#/definitions/AzureTemplateFile"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AzureCreateBPStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "configuration"
          ],
          "properties": {
            "configuration": {
              "$ref": "#/definitions/AzureCreateBPStepConfiguration"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AzureManagementSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/AzureScopeType"
        },
        {
          "type": "object",
          "required": [
            "location",
            "managementGroupId"
          ],
          "properties": {
            "location": {
              "type": "string"
            },
            "managementGroupId": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AzureRepoStore": {
      "allOf": [
        {
          "$ref": "#/definitions/StoreConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "gitFetchType"
          ],
          "properties": {
            "branch": {
              "type": "string"
            },
            "commitId": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "folderPath": {
              "type": "string"
            },
            "gitFetchType": {
              "type": "string",
              "enum": [
                "Branch",
                "Commit"
              ]
            },
            "paths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "repoName": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "commitId"
              ]
            },
            {
              "required": [
                "branch"
              ]
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "folderPath"
              ]
            },
            {
              "required": [
                "paths"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AzureResourceGroupSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/AzureScopeType"
        },
        {
          "type": "object",
          "required": [
            "resourceGroup",
            "subscription"
          ],
          "properties": {
            "mode": {
              "type": "string",
              "enum": [
                "Incremental",
                "Complete"
              ]
            },
            "resourceGroup": {
              "type": "string"
            },
            "subscription": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AzureScopeType": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AzureSubscriptionSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/AzureScopeType"
        },
        {
          "type": "object",
          "required": [
            "location",
            "subscription"
          ],
          "properties": {
            "location": {
              "type": "string"
            },
            "subscription": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AzureTemplateFile": {
      "type": "object",
      "required": [
        "store"
      ],
      "properties": {
        "store": {
          "$ref": "#/definitions/StoreConfigWrapper"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AzureTenantSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/AzureScopeType"
        },
        {
          "type": "object",
          "required": [
            "location"
          ],
          "properties": {
            "location": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AzureWebAppInfrastructure": {
      "allOf": [
        {
          "$ref": "#/definitions/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "resourceGroup",
            "subscriptionId"
          ],
          "properties": {
            "connectorRef": {
              "type": "string",
              "minLength": 1
            },
            "resourceGroup": {
              "type": "string",
              "minLength": 1
            },
            "subscriptionId": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AzureWebAppRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AzureWebAppServiceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ServiceSpec"
        },
        {
          "type": "object",
          "properties": {
            "applicationSettings": {
              "$ref": "#/definitions/ApplicationSettingsConfiguration"
            },
            "connectionStrings": {
              "$ref": "#/definitions/ConnectionStringsConfiguration"
            },
            "startupCommand": {
              "$ref": "#/definitions/StartupCommandConfiguration"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AzureWebAppSlotDeploymentStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "deploymentSlot",
            "webApp"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "deploymentSlot": {
              "type": "string",
              "minLength": 1
            },
            "webApp": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AzureWebAppSwapSlotStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "targetSlot"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "targetSlot": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AzureWebAppTrafficShiftStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "traffic"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "traffic": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ParameterFieldString"
                },
                {
                  "type": "string"
                },
                {
                  "type": "number"
                }
              ],
              "minLength": 1
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "BitbucketStore": {
      "allOf": [
        {
          "$ref": "#/definitions/StoreConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "gitFetchType"
          ],
          "properties": {
            "branch": {
              "type": "string"
            },
            "commitId": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "folderPath": {
              "type": "string"
            },
            "gitFetchType": {
              "type": "string",
              "enum": [
                "Branch",
                "Commit"
              ]
            },
            "paths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "repoName": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "commitId"
              ]
            },
            {
              "required": [
                "branch"
              ]
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "folderPath"
              ]
            },
            {
              "required": [
                "paths"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Capacity": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Count"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/CountCapacitySpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Percentage"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/PercentageCapacitySpec"
              }
            }
          }
        }
      ]
    },
    "CapacitySpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ChaosStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "expectedResilienceScore",
            "experimentRef"
          ],
          "properties": {
            "assertion": {
              "type": "string"
            },
            "expectedResilienceScore": {
              "type": "number",
              "format": "double"
            },
            "experimentRef": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CloudformationCreateStackStepConfiguration": {
      "type": "object",
      "required": [
        "connectorRef",
        "region",
        "stackName",
        "templateFile"
      ],
      "properties": {
        "capabilities": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "connectorRef": {
          "type": "string"
        },
        "parameterOverrides": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/StringNGVariable"
              }
            ]
          }
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CloudformationParametersFileSpec"
          }
        },
        "region": {
          "type": "string"
        },
        "roleArn": {
          "type": "string"
        },
        "skipOnStackStatuses": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "stackName": {
          "type": "string"
        },
        "tags": {
          "$ref": "#/definitions/CloudformationTags"
        },
        "templateFile": {
          "$ref": "#/definitions/CloudformationTemplateFile"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CloudformationCreateStackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "configuration",
            "provisionerIdentifier"
          ],
          "properties": {
            "configuration": {
              "$ref": "#/definitions/CloudformationCreateStackStepConfiguration"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "metadata": {
              "type": "string"
            },
            "provisionerIdentifier": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CloudformationDeleteStackStepConfiguration": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Inherited"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/InheritedCloudformationDeleteStackStepConfiguration"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Inline"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/InlineCloudformationDeleteStackStepConfiguration"
              }
            }
          }
        }
      ]
    },
    "CloudformationDeleteStackStepConfigurationSpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CloudformationDeleteStackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "configuration"
          ],
          "properties": {
            "configuration": {
              "$ref": "#/definitions/CloudformationDeleteStackStepConfiguration"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CloudformationParametersFileSpec": {
      "type": "object",
      "required": [
        "identifier",
        "store"
      ],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "store": {
          "$ref": "#/definitions/StoreConfigWrapper"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CloudformationRollbackStepConfiguration": {
      "type": "object",
      "required": [
        "provisionerIdentifier"
      ],
      "properties": {
        "provisionerIdentifier": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CloudformationRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "configuration"
          ],
          "properties": {
            "configuration": {
              "$ref": "#/definitions/CloudformationRollbackStepConfiguration"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CloudformationTags": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Inline"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/InlineCloudformationTagsFileSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Remote"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/RemoteCloudformationTagsFileSpec"
              }
            }
          }
        }
      ]
    },
    "CloudformationTagsFileSpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CloudformationTemplateFile": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Inline"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/InlineCloudformationTemplateFileSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Remote"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/RemoteCloudformationTemplateFileSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "S3URL"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/S3UrlCloudformationTemplateFileSpec"
              }
            }
          }
        }
      ]
    },
    "CloudformationTemplateFileSpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ClusterYaml": {
      "type": "object",
      "required": [
        "identifier"
      ],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "metadata": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CommandStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "onDelegate"
          ],
          "properties": {
            "commandUnits": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CommandUnitWrapper"
              }
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "environmentVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/StringNGVariable"
                  }
                ]
              }
            },
            "host": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "onDelegate": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/StringNGVariable"
                  }
                ]
              }
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CommandUnitBaseSpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CommandUnitWrapper": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Copy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/CopyCommandUnitSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "DownloadArtifact"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/DownloadArtifactCommandUnitSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Script"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ScriptCommandUnitSpec"
              }
            }
          }
        }
      ]
    },
    "ConfigFile": {
      "type": "object",
      "required": [
        "identifier",
        "spec"
      ],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/ConfigFileAttributes"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ConfigFileAttributeStepParameters": {
      "type": "object",
      "properties": {
        "store": {
          "$ref": "#/definitions/StoreConfigWrapperParameters"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ConfigFileAttributes": {
      "type": "object",
      "required": [
        "store"
      ],
      "properties": {
        "configFileAttributeStepParameters": {
          "$ref": "#/definitions/ConfigFileAttributeStepParameters"
        },
        "store": {
          "$ref": "#/definitions/StoreConfigWrapper"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ConfigFileOverrideSetWrapper": {
      "type": "object",
      "properties": {
        "overrideSet": {
          "$ref": "#/definitions/ConfigFileOverrideSets"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ConfigFileOverrideSets": {
      "type": "object",
      "properties": {
        "configFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConfigFileWrapper"
          }
        },
        "identifier": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ConfigFileWrapper": {
      "type": "object",
      "properties": {
        "configFile": {
          "$ref": "#/definitions/ConfigFile"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ConnectionStringsConfiguration": {
      "type": "object",
      "required": [
        "store"
      ],
      "properties": {
        "metadata": {
          "type": "string"
        },
        "store": {
          "$ref": "#/definitions/StoreConfigWrapper"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CopyCommandUnitSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/CommandUnitBaseSpec"
        },
        {
          "type": "object",
          "required": [
            "destinationPath",
            "sourceType"
          ],
          "properties": {
            "destinationPath": {
              "type": "string"
            },
            "sourceType": {
              "type": "string",
              "enum": [
                "Artifact",
                "Config"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CountCapacitySpec": {
      "allOf": [
        {
          "$ref": "#/definitions/CapacitySpec"
        },
        {
          "type": "object",
          "properties": {
            "count": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CountInstanceSelection": {
      "allOf": [
        {
          "$ref": "#/definitions/InstanceSelectionBase"
        },
        {
          "type": "object",
          "properties": {
            "count": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ParameterFieldString"
                },
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CreatePRStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "overrideConfig",
            "shell"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "overrideConfig": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "shell": {
              "type": "string",
              "enum": [
                "Bash"
              ]
            },
            "source": {
              "$ref": "#/definitions/CreatePRStepUpdateConfigScriptWrapper"
            },
            "stringMap": {
              "$ref": "#/definitions/ParameterFieldMapStringString"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CreatePRStepUpdateConfigScriptBaseSource": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CreatePRStepUpdateConfigScriptInlineSource": {
      "allOf": [
        {
          "$ref": "#/definitions/CreatePRStepUpdateConfigScriptBaseSource"
        },
        {
          "type": "object",
          "properties": {
            "updateConfigScript": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CreatePRStepUpdateConfigScriptWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Inline"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/CreatePRStepUpdateConfigScriptInlineSource"
              }
            }
          }
        }
      ]
    },
    "CustomArtifactConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactConfig"
        },
        {
          "type": "object",
          "required": [
            "version"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "inputs": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/StringNGVariable"
                  }
                ]
              }
            },
            "metadata": {
              "type": "string"
            },
            "scripts": {
              "$ref": "#/definitions/CustomArtifactScripts"
            },
            "timeout": {
              "type": "string",
              "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
            },
            "version": {
              "type": "string"
            },
            "versionRegex": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomArtifactScriptInfo": {
      "type": "object",
      "required": [
        "shell",
        "source"
      ],
      "properties": {
        "shell": {
          "type": "string",
          "enum": [
            "Bash",
            "PowerShell"
          ]
        },
        "source": {
          "$ref": "#/definitions/CustomArtifactScriptSourceWrapper"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomArtifactScriptSourceWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Inline"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/CustomScriptInlineSource"
              }
            }
          }
        }
      ]
    },
    "CustomArtifactScripts": {
      "type": "object",
      "required": [
        "fetchAllArtifacts"
      ],
      "properties": {
        "fetchAllArtifacts": {
          "$ref": "#/definitions/FetchAllArtifacts"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomDeploymentConnectorNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/CustomDeploymentNGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,63}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "Connector"
              ]
            },
            "value": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomDeploymentInfrastructure": {
      "allOf": [
        {
          "$ref": "#/definitions/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "customDeploymentRef"
          ],
          "properties": {
            "customDeploymentRef": {
              "$ref": "#/definitions/StepTemplateRef",
              "minLength": 1
            },
            "metadata": {
              "type": "string"
            },
            "variables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/CustomDeploymentConnectorNGVariable"
                  },
                  {
                    "$ref": "#/definitions/CustomDeploymentNumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/CustomDeploymentSecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/CustomDeploymentStringNGVariable"
                  }
                ]
              }
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomDeploymentNGVariable": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "enum": [
            "String",
            "Number",
            "Secret",
            "Connector"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomDeploymentNumberNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/CustomDeploymentNGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,63}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "Number"
              ]
            },
            "value": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double"
                },
                {
                  "type": "string",
                  "pattern": "(^[+-]?[0-9]+\\.?[0-9]*$|(<\\+.+>.*)|^$)"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomDeploymentSecretNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/CustomDeploymentNGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,63}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "Secret"
              ]
            },
            "value": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomDeploymentServiceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ServiceSpec"
        },
        {
          "type": "object",
          "required": [
            "customDeploymentRef"
          ],
          "properties": {
            "customDeploymentRef": {
              "$ref": "#/definitions/StepTemplateRef",
              "minLength": 1
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomDeploymentStringNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/CustomDeploymentNGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,63}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "String"
              ]
            },
            "value": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomRemoteStoreConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/StoreConfig"
        },
        {
          "type": "object",
          "required": [
            "extractionScript",
            "filePath"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "extractionScript": {
              "type": "string"
            },
            "filePath": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomScriptBaseSource": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomScriptInlineSource": {
      "allOf": [
        {
          "$ref": "#/definitions/CustomScriptBaseSource"
        },
        {
          "type": "object",
          "properties": {
            "script": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DeleteManifestPathSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/DeleteResourcesBaseSpec"
        },
        {
          "type": "object",
          "properties": {
            "allManifestPaths": {
              "type": "boolean"
            },
            "manifestPaths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DeleteReleaseNameSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/DeleteResourcesBaseSpec"
        },
        {
          "type": "object",
          "properties": {
            "deleteNamespace": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DeleteResourceNameSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/DeleteResourcesBaseSpec"
        },
        {
          "type": "object",
          "required": [
            "resourceNames"
          ],
          "properties": {
            "resourceNames": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ],
              "minLength": 1
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DeleteResourcesBaseSpec": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DeleteResourcesWrapper": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "ResourceName",
            "ReleaseName",
            "ManifestPath"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ManifestPath"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/DeleteManifestPathSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ReleaseName"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/DeleteReleaseNameSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ResourceName"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/DeleteResourceNameSpec"
              }
            }
          }
        }
      ]
    },
    "DeploymentStageConfig": {
      "type": "object",
      "required": [
        "execution"
      ],
      "properties": {
        "customDeploymentRef": {
          "$ref": "#/definitions/StepTemplateRef"
        },
        "deploymentType": {
          "type": "string",
          "enum": [
            "Kubernetes",
            "NativeHelm",
            "Ssh",
            "WinRm",
            "ServerlessAwsLambda",
            "AzureWebApp",
            "CustomDeployment",
            "ECS",
            "Elastigroup",
            "TAS",
            "Asg"
          ]
        },
        "environment": {
          "$ref": "#/definitions/EnvironmentYamlV2"
        },
        "environmentGroup": {
          "$ref": "#/definitions/EnvironmentGroupYaml"
        },
        "environments": {
          "$ref": "#/definitions/EnvironmentsYaml"
        },
        "execution": {
          "$ref": "#/definitions/ExecutionElementConfig"
        },
        "gitOpsEnabled": {
          "type": "boolean"
        },
        "infrastructure": {
          "$ref": "#/definitions/PipelineInfrastructure"
        },
        "service": {
          "$ref": "#/definitions/ServiceYamlV2"
        },
        "serviceConfig": {
          "$ref": "#/definitions/ServiceConfig"
        },
        "services": {
          "$ref": "#/definitions/ServicesYaml"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DeploymentStageNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "description": {
          "type": "string"
        },
        "failureStrategies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FailureStrategyConfig"
          }
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,63}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$"
        },
        "skipInstances": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "strategy": {
          "$ref": "#/definitions/StrategyConfig"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "Deployment"
          ]
        },
        "variables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/StringNGVariable"
              }
            ]
          }
        },
        "when": {
          "$ref": "#/definitions/StageWhenCondition"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Deployment"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/DeploymentStageConfig"
              }
            }
          }
        }
      ]
    },
    "DockerHubArtifactConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "imagePath"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "imagePath": {
              "type": "string"
            },
            "tag": {
              "type": "string"
            },
            "tagRegex": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "tagRegex"
              ]
            },
            {
              "required": [
                "tag"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DownloadArtifactCommandUnitSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/CommandUnitBaseSpec"
        },
        {
          "type": "object",
          "required": [
            "destinationPath"
          ],
          "properties": {
            "destinationPath": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EcrArtifactConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "imagePath",
            "region"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "imagePath": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "region": {
              "type": "string"
            },
            "tag": {
              "type": "string"
            },
            "tagRegex": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "tagRegex"
              ]
            },
            {
              "required": [
                "tag"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EcsBlueGreenCreateServiceStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "loadBalancer",
            "prodListener",
            "prodListenerRuleArn",
            "stageListener",
            "stageListenerRuleArn"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "loadBalancer": {
              "type": "string"
            },
            "prodListener": {
              "type": "string"
            },
            "prodListenerRuleArn": {
              "type": "string"
            },
            "stageListener": {
              "type": "string"
            },
            "stageListenerRuleArn": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EcsBlueGreenRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EcsBlueGreenSwapTargetGroupsStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "doNotDownsizeOldService": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EcsCanaryDeleteStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EcsCanaryDeployStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EcsInfrastructure": {
      "allOf": [
        {
          "$ref": "#/definitions/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "cluster",
            "connectorRef",
            "region"
          ],
          "properties": {
            "cluster": {
              "type": "string",
              "minLength": 1
            },
            "connectorRef": {
              "type": "string",
              "minLength": 1
            },
            "metadata": {
              "type": "string"
            },
            "region": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EcsRollingDeployStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "forceNewDeployment": {
              "type": "boolean"
            },
            "sameAsAlreadyRunningInstances": {
              "type": "boolean"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EcsRollingRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EcsRunTaskStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "runTaskRequestDefinition": {
              "$ref": "#/definitions/StoreConfigWrapper"
            },
            "skipSteadyStateCheck": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "taskDefinition": {
              "$ref": "#/definitions/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EcsScalableTargetDefinitionManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EcsScalingPolicyDefinitionManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EcsServiceDefinitionManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EcsServiceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ServiceSpec"
        },
        {
          "type": "object",
          "properties": { }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EcsTaskDefinitionManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ElastigroupConfiguration": {
      "type": "object",
      "required": [
        "store"
      ],
      "properties": {
        "metadata": {
          "type": "string"
        },
        "store": {
          "$ref": "#/definitions/StoreConfigWrapper"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ElastigroupCurrentRunningInstances": {
      "allOf": [
        {
          "$ref": "#/definitions/ElastigroupInstancesSpec"
        },
        {
          "type": "object"
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ElastigroupDeployStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "metadata": {
              "type": "string"
            },
            "newService": {
              "$ref": "#/definitions/Capacity"
            },
            "oldService": {
              "$ref": "#/definitions/Capacity"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ElastigroupFixedInstances": {
      "allOf": [
        {
          "$ref": "#/definitions/ElastigroupInstancesSpec"
        },
        {
          "type": "object",
          "properties": {
            "desired": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            },
            "max": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            },
            "min": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ElastigroupInfrastructure": {
      "allOf": [
        {
          "$ref": "#/definitions/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "configuration",
            "connectorRef"
          ],
          "properties": {
            "configuration": {
              "$ref": "#/definitions/ElastigroupConfiguration"
            },
            "connectorRef": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ElastigroupInstances": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Fixed",
            "CurrentRunning"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "CurrentRunning"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ElastigroupCurrentRunningInstances"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Fixed"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ElastigroupFixedInstances"
              }
            }
          }
        }
      ]
    },
    "ElastigroupInstancesSpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Fixed",
            "CurrentRunning"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ElastigroupRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ElastigroupServiceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ServiceSpec"
        },
        {
          "type": "object",
          "properties": {
            "startupScript": {
              "$ref": "#/definitions/StartupScriptConfiguration"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ElastigroupSetupStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "instances",
            "name"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "instances": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ElastigroupInstances"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "name": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EnvironmentGroupMetadata": {
      "type": "object",
      "properties": {
        "parallel": {
          "type": "boolean"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EnvironmentGroupYaml": {
      "type": "object",
      "required": [
        "envGroupRef"
      ],
      "properties": {
        "__uuid": {
          "type": "string"
        },
        "deployToAll": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "envGroupRef": {
          "type": "string"
        },
        "environments": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EnvironmentYamlV2"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "filters": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FilterYaml"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "metadata": {
          "$ref": "#/definitions/EnvironmentGroupMetadata"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EnvironmentYaml": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "PreProduction",
            "Production"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EnvironmentYamlV2": {
      "type": "object",
      "required": [
        "environmentRef"
      ],
      "properties": {
        "deployToAll": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "environmentInputs": {
          "oneOf": [
            {
              "$ref": "#/definitions/JsonNode"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "environmentRef": {
          "type": "string"
        },
        "gitOpsClusters": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClusterYaml"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "infrastructureDefinition": {
          "oneOf": [
            {
              "$ref": "#/definitions/InfraStructureDefinitionYaml"
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "infrastructureDefinitions": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InfraStructureDefinitionYaml"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "serviceOverrideInputs": {
          "oneOf": [
            {
              "$ref": "#/definitions/JsonNode"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EnvironmentsMetadata": {
      "type": "object",
      "properties": {
        "parallel": {
          "type": "boolean"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EnvironmentsYaml": {
      "type": "object",
      "properties": {
        "filters": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FilterYaml"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "metadata": {
          "readOnly": true,
          "$ref": "#/definitions/EnvironmentsMetadata"
        },
        "values": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EnvironmentYamlV2"
              }
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ExecutionElementConfig": {
      "type": "object",
      "required": [
        "steps"
      ],
      "properties": {
        "rollbackSteps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionWrapperConfig"
          }
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionWrapperConfig"
          },
          "maxItems": 2147483647,
          "minItems": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ExecutionWrapperConfig": {
      "type": "object",
      "properties": {
        "parallel": {
          "$ref": "#/definitions/ParallelStepElementConfig"
        },
        "step": {
          "$ref": "#/definitions/StepElementConfig"
        },
        "stepGroup": {
          "$ref": "#/definitions/StepGroupElementConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FailureStrategyActionConfig": {
      "type": "object",
      "required": [
        "type"
      ],
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Ignore",
            "Retry",
            "MarkAsSuccess",
            "Abort",
            "StageRollback",
            "StepGroupRollback",
            "PipelineRollback",
            "ManualIntervention",
            "ProceedWithDefaultValues"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FailureStrategyConfig": {
      "type": "object",
      "required": [
        "onFailure"
      ],
      "properties": {
        "onFailure": {
          "$ref": "#/definitions/OnFailureConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FetchAllArtifacts": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "artifactsArrayPath": {
          "oneOf": [
            {
              "$ref": "#/definitions/ParameterFieldString"
            },
            {
              "type": "string"
            }
          ]
        },
        "attributes": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/StringNGVariable"
              }
            ]
          }
        },
        "spec": {
          "$ref": "#/definitions/CustomArtifactScriptInfo"
        },
        "versionPath": {
          "oneOf": [
            {
              "$ref": "#/definitions/ParameterFieldString"
            },
            {
              "type": "string"
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FetchInstanceScriptStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FetchLinkedAppsStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FilterSpec": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FilterYaml": {
      "type": "object",
      "required": [
        "entities",
        "spec",
        "type"
      ],
      "properties": {
        "entities": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "infrastructures",
              "gitOpsClusters",
              "environments"
            ]
          }
        },
        "spec": {
          "$ref": "#/definitions/FilterSpec"
        },
        "type": {
          "type": "string",
          "enum": [
            "tags",
            "all"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "GcrArtifactConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "imagePath",
            "registryHostname"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "imagePath": {
              "type": "string"
            },
            "registryHostname": {
              "type": "string"
            },
            "tag": {
              "type": "string"
            },
            "tagRegex": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "tagRegex"
              ]
            },
            {
              "required": [
                "tag"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "GcsStoreConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/StoreConfig"
        },
        {
          "type": "object",
          "properties": {
            "bucketName": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "folderPath": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "GitLabStore": {
      "allOf": [
        {
          "$ref": "#/definitions/StoreConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "gitFetchType"
          ],
          "properties": {
            "branch": {
              "type": "string"
            },
            "commitId": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "folderPath": {
              "type": "string"
            },
            "gitFetchType": {
              "type": "string",
              "enum": [
                "Branch",
                "Commit"
              ]
            },
            "paths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "repoName": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "commitId"
              ]
            },
            {
              "required": [
                "branch"
              ]
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "folderPath"
              ]
            },
            {
              "required": [
                "paths"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "GitOpsDeploymentRepoManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "GitStore": {
      "allOf": [
        {
          "$ref": "#/definitions/StoreConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "gitFetchType"
          ],
          "properties": {
            "branch": {
              "type": "string"
            },
            "commitId": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "folderPath": {
              "type": "string"
            },
            "gitFetchType": {
              "type": "string",
              "enum": [
                "Branch",
                "Commit"
              ]
            },
            "paths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "repoName": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "commitId"
              ]
            },
            {
              "required": [
                "branch"
              ]
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "folderPath"
              ]
            },
            {
              "required": [
                "paths"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "GithubPackagesArtifactConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "packageName",
            "packageType"
          ],
          "properties": {
            "connectorRef": {
              "type": "string",
              "minLength": 1
            },
            "org": {
              "type": "string"
            },
            "packageName": {
              "type": "string",
              "minLength": 1
            },
            "packageType": {
              "type": "string",
              "enum": [
                "npm",
                "maven",
                "rubygems",
                "nuget",
                "container"
              ]
            },
            "version": {
              "type": "string"
            },
            "versionRegex": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "versionRegex"
              ]
            },
            {
              "required": [
                "version"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "GithubStore": {
      "allOf": [
        {
          "$ref": "#/definitions/StoreConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "gitFetchType"
          ],
          "properties": {
            "branch": {
              "type": "string"
            },
            "commitId": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "folderPath": {
              "type": "string"
            },
            "gitFetchType": {
              "type": "string",
              "enum": [
                "Branch",
                "Commit"
              ]
            },
            "paths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "repoName": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "commitId"
              ]
            },
            {
              "required": [
                "branch"
              ]
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "folderPath"
              ]
            },
            {
              "required": [
                "paths"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "GoogleArtifactRegistryConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "package",
            "project",
            "region",
            "repositoryName",
            "repositoryType"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "package": {
              "type": "string"
            },
            "project": {
              "type": "string"
            },
            "region": {
              "type": "string"
            },
            "repositoryName": {
              "type": "string"
            },
            "repositoryType": {
              "type": "string",
              "enum": [
                "docker"
              ]
            },
            "version": {
              "type": "string"
            },
            "versionRegex": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "versionRegex"
              ]
            },
            {
              "required": [
                "version"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HarnessFileStoreSource": {
      "allOf": [
        {
          "$ref": "#/definitions/ShellScriptBaseSource"
        },
        {
          "type": "object",
          "properties": {
            "file": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HarnessForConfig": {
      "type": "object",
      "properties": {
        "end": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "items": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "maxConcurrency": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "partitionSize": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "start": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "times": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "unit": {
          "type": "string",
          "enum": [
            "Percentage",
            "Count"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "times"
              ]
            },
            {
              "required": [
                "items"
              ]
            }
          ]
        }
      ]
    },
    "HarnessStore": {
      "allOf": [
        {
          "$ref": "#/definitions/StoreConfig"
        },
        {
          "type": "object",
          "properties": {
            "files": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "secretFiles": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HelmChartManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "chartName": {
              "type": "string"
            },
            "chartVersion": {
              "type": "string"
            },
            "commandFlags": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HelmManifestCommandFlag"
              }
            },
            "helmVersion": {
              "type": "string",
              "enum": [
                "V2",
                "V3",
                "V380"
              ]
            },
            "metadata": {
              "type": "string"
            },
            "skipResourceVersioning": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            },
            "valuesPaths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HelmDeployStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ignoreReleaseHistFailStatus": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HelmManifestCommandFlag": {
      "type": "object",
      "required": [
        "commandType"
      ],
      "properties": {
        "commandType": {
          "type": "string",
          "enum": [
            "Fetch",
            "Template",
            "Pull",
            "Install",
            "Upgrade",
            "Rollback",
            "History",
            "Delete",
            "Uninstall",
            "List",
            "Add",
            "Update",
            "Version"
          ]
        },
        "flag": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HelmRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HostAttributesFilter": {
      "allOf": [
        {
          "$ref": "#/definitions/HostFilterSpec"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HostFilter": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "All",
            "HostNames",
            "HostAttributes"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "All"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/AllHostsFilter"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "HostAttributes"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/HostAttributesFilter"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "HostNames"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/HostNamesFilter"
              }
            }
          }
        }
      ]
    },
    "HostFilterSpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "All",
            "HostNames",
            "HostAttributes"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HostNamesFilter": {
      "allOf": [
        {
          "$ref": "#/definitions/HostFilterSpec"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HttpStoreConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/StoreConfig"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "IgnoreFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Ignore"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InfraOverrides": {
      "type": "object",
      "properties": {
        "environment": {
          "$ref": "#/definitions/EnvironmentYaml"
        },
        "infrastructureDefinition": {
          "$ref": "#/definitions/InfrastructureDef"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InfraStructureDefinitionYaml": {
      "type": "object",
      "required": [
        "identifier"
      ],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "inputs": {
          "oneOf": [
            {
              "$ref": "#/definitions/JsonNode"
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "metadata": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InfraUseFromStage": {
      "type": "object",
      "required": [
        "stage"
      ],
      "properties": {
        "overrides": {
          "$ref": "#/definitions/InfraOverrides"
        },
        "stage": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Infrastructure": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InfrastructureDef": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "provisioner": {
          "$ref": "#/definitions/ExecutionElementConfig"
        },
        "type": {
          "type": "string",
          "enum": [
            "KubernetesDirect",
            "KubernetesGcp",
            "KubernetesAzure",
            "Pdc",
            "SshWinRmAzure",
            "ServerlessAwsLambda",
            "AzureWebApp",
            "SshWinRmAws",
            "CustomDeployment",
            "ECS",
            "Elastigroup",
            "TAS",
            "Asg"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Asg"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/AsgInfrastructure"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AzureWebApp"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/AzureWebAppInfrastructure"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "CustomDeployment"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/CustomDeploymentInfrastructure"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ECS"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/EcsInfrastructure"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Elastigroup"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ElastigroupInfrastructure"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "KubernetesAzure"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/K8sAzureInfrastructure"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "KubernetesDirect"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/K8SDirectInfrastructure"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "KubernetesGcp"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/K8sGcpInfrastructure"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Pdc"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/PdcInfrastructure"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ServerlessAwsLambda"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ServerlessAwsLambdaInfrastructure"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "SshWinRmAws"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/SshWinRmAwsInfrastructure"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "SshWinRmAzure"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/SshWinRmAzureInfrastructure"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "TAS"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/TanzuApplicationServiceInfrastructure"
              }
            }
          }
        }
      ]
    },
    "InheritFromManifestStoreConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/StoreConfig"
        },
        {
          "type": "object",
          "properties": {
            "paths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InheritedCloudformationDeleteStackStepConfiguration": {
      "allOf": [
        {
          "$ref": "#/definitions/CloudformationDeleteStackStepConfigurationSpec"
        },
        {
          "type": "object",
          "required": [
            "provisionerIdentifier"
          ],
          "properties": {
            "provisionerIdentifier": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InlineCloudformationDeleteStackStepConfiguration": {
      "allOf": [
        {
          "$ref": "#/definitions/CloudformationDeleteStackStepConfigurationSpec"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "region",
            "stackName"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "region": {
              "type": "string"
            },
            "roleArn": {
              "type": "string"
            },
            "stackName": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InlineCloudformationTagsFileSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/CloudformationTagsFileSpec"
        },
        {
          "type": "object",
          "required": [
            "content"
          ],
          "properties": {
            "content": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InlineCloudformationTemplateFileSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/CloudformationTemplateFileSpec"
        },
        {
          "type": "object",
          "required": [
            "templateBody"
          ],
          "properties": {
            "templateBody": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InlineStoreConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/StoreConfig"
        },
        {
          "type": "object",
          "required": [
            "content"
          ],
          "properties": {
            "content": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InlineTerraformBackendConfigSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/TerraformBackendConfigSpec"
        },
        {
          "type": "object",
          "properties": {
            "content": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InlineTerraformVarFileSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/TerraformVarFileSpec"
        },
        {
          "type": "object",
          "properties": {
            "content": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InlineTerragruntBackendConfigSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/TerragruntBackendConfigSpec"
        },
        {
          "type": "object",
          "properties": {
            "content": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InlineTerragruntVarFileSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/TerragruntVarFileSpec"
        },
        {
          "type": "object",
          "properties": {
            "content": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InputSetValidator": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "string"
        },
        "validatorType": {
          "type": "string",
          "enum": [
            "ALLOWED_VALUES",
            "REGEX"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InstanceSelectionBase": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InstanceSelectionWrapper": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Count",
            "Percentage"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Count"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/CountInstanceSelection"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Percentage"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/PercentageInstanceSelection"
              }
            }
          }
        }
      ]
    },
    "JenkinsArtifactConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "jobName"
          ],
          "properties": {
            "artifactPath": {
              "type": "string"
            },
            "build": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "jobName": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JenkinsBuildStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "jobName"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "jobName": {
              "type": "string"
            },
            "jobParameter": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/JenkinsParameterField"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "metadata": {
              "type": "string"
            },
            "unstableStatusAsSuccess": {
              "type": "boolean"
            },
            "useConnectorUrlForJobExecution": {
              "type": "boolean"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JenkinsParameterField": {
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "metadata": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JsonNode": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8SDirectInfrastructure": {
      "allOf": [
        {
          "$ref": "#/definitions/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "namespace",
            "releaseName"
          ],
          "properties": {
            "connectorRef": {
              "type": "string",
              "minLength": 1
            },
            "namespace": {
              "type": "string",
              "minLength": 1
            },
            "releaseName": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sApplyStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "filePaths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "overrides": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ManifestConfigWrapper"
              }
            },
            "skipDryRun": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "skipRendering": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "skipSteadyStateCheck": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sAzureInfrastructure": {
      "allOf": [
        {
          "$ref": "#/definitions/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "cluster",
            "connectorRef",
            "namespace",
            "releaseName",
            "resourceGroup",
            "subscriptionId"
          ],
          "properties": {
            "cluster": {
              "type": "string",
              "minLength": 1
            },
            "connectorRef": {
              "type": "string",
              "minLength": 1
            },
            "namespace": {
              "type": "string",
              "minLength": 1
            },
            "releaseName": {
              "type": "string",
              "minLength": 1
            },
            "resourceGroup": {
              "type": "string",
              "minLength": 1
            },
            "subscriptionId": {
              "type": "string",
              "minLength": 1
            },
            "useClusterAdminCredentials": {
              "type": "boolean"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sBGSwapServicesStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sBlueGreenStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "pruningEnabled": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "skipDryRun": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sCanaryDeleteStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sCanaryStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "instanceSelection"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "instanceSelection": {
              "$ref": "#/definitions/InstanceSelectionWrapper"
            },
            "skipDryRun": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sDeleteStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "deleteResources"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "deleteResources": {
              "$ref": "#/definitions/DeleteResourcesWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sGcpInfrastructure": {
      "allOf": [
        {
          "$ref": "#/definitions/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "cluster",
            "connectorRef",
            "namespace",
            "releaseName"
          ],
          "properties": {
            "cluster": {
              "type": "string",
              "minLength": 1
            },
            "connectorRef": {
              "type": "string",
              "minLength": 1
            },
            "metadata": {
              "type": "string"
            },
            "namespace": {
              "type": "string",
              "minLength": 1
            },
            "releaseName": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "skipResourceVersioning": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ParameterFieldBoolean"
                },
                {
                  "type": "string"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            },
            "valuesPaths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sRollingRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "pruningEnabled": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sRollingStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "pruningEnabled": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "skipDryRun": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sScaleStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "instanceSelection",
            "workload"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "instanceSelection": {
              "$ref": "#/definitions/InstanceSelectionWrapper"
            },
            "skipSteadyStateCheck": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "workload": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "KubernetesServiceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ServiceSpec"
        },
        {
          "type": "object",
          "properties": { }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "KustomizeManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "overlayConfiguration": {
              "$ref": "#/definitions/OverlayConfiguration"
            },
            "patchesPaths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "pluginPath": {
              "type": "string"
            },
            "skipResourceVersioning": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ParameterFieldBoolean"
                },
                {
                  "type": "string"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "KustomizePatchesManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManifestAttributes": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManifestConfig": {
      "type": "object",
      "required": [
        "identifier",
        "spec",
        "type"
      ],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "HelmChart",
            "K8sManifest",
            "Kustomize",
            "KustomizePatches",
            "OpenshiftParam",
            "OpenshiftTemplate",
            "Values",
            "ServerlessAwsLambda",
            "ReleaseRepo",
            "DeploymentRepo",
            "EcsTaskDefinition",
            "EcsServiceDefinition",
            "EcsScalableTargetDefinition",
            "EcsScalingPolicyDefinition",
            "TasManifest",
            "TasVars",
            "TasAutoScaler",
            "AsgLaunchTemplate",
            "AsgConfiguration",
            "AsgScalingPolicy",
            "AsgScheduledUpdateGroupAction"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "AsgConfiguration"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/AsgConfigurationManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AsgLaunchTemplate"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/AsgLaunchTemplateManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AsgScalingPolicy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/AsgScalingPolicyManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AsgScheduledUpdateGroupAction"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/AsgScheduledUpdateGroupActionManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "DeploymentRepo"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/GitOpsDeploymentRepoManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "EcsScalableTargetDefinition"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/EcsScalableTargetDefinitionManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "EcsScalingPolicyDefinition"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/EcsScalingPolicyDefinitionManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "EcsServiceDefinition"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/EcsServiceDefinitionManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "EcsTaskDefinition"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/EcsTaskDefinitionManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "HelmChart"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/HelmChartManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "K8sManifest"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/K8sManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Kustomize"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/KustomizeManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "KustomizePatches"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/KustomizePatchesManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "OpenshiftParam"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/OpenshiftParamManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "OpenshiftTemplate"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/OpenshiftManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ReleaseRepo"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ReleaseRepoManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ServerlessAwsLambda"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ServerlessAwsLambdaManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "TasAutoScaler"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/AutoScalerManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "TasManifest"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/TasManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "TasVars"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/VarsManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Values"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ValuesManifest"
              }
            }
          }
        }
      ]
    },
    "ManifestConfigWrapper": {
      "type": "object",
      "properties": {
        "manifest": {
          "$ref": "#/definitions/ManifestConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManifestOverrideSetWrapper": {
      "type": "object",
      "properties": {
        "overrideSet": {
          "$ref": "#/definitions/ManifestOverrideSets"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManifestOverrideSets": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "manifests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ManifestConfigWrapper"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManualFailureSpecConfig": {
      "type": "object",
      "required": [
        "onTimeout",
        "timeout"
      ],
      "properties": {
        "onTimeout": {
          "$ref": "#/definitions/OnTimeoutConfig"
        },
        "timeout": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManualInterventionFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "readOnly": true,
              "$ref": "#/definitions/ManualFailureSpecConfig"
            },
            "type": {
              "type": "string",
              "enum": [
                "ManualIntervention"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "MarkAsSuccessFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "MarkAsSuccess"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "MatrixConfigInterface": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "MergePRStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "deleteSourceBranch"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "deleteSourceBranch": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "variables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/StringNGVariable"
                  }
                ]
              }
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ModuleSource": {
      "type": "object",
      "required": [
        "useConnectorCredentials"
      ],
      "properties": {
        "useConnectorCredentials": {
          "oneOf": [
            {
              "$ref": "#/definitions/ParameterFieldBoolean"
            },
            {
              "type": "string"
            },
            {
              "type": "boolean"
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NGVariable": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "description": {
          "type": "string"
        },
        "metadata": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "enum": [
            "String",
            "Number",
            "Secret"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NGVariableOverrideSetWrapper": {
      "type": "object",
      "properties": {
        "overrideSet": {
          "$ref": "#/definitions/NGVariableOverrideSets"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NGVariableOverrideSets": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "variables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/StringNGVariable"
              }
            ]
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NativeHelmServiceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ServiceSpec"
        },
        {
          "type": "object",
          "properties": { }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Nexus2RegistryArtifactConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "repository",
            "repositoryFormat"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "repository": {
              "type": "string"
            },
            "repositoryFormat": {
              "type": "string",
              "enum": [
                "maven",
                "npm",
                "nuget"
              ]
            },
            "tag": {
              "type": "string"
            },
            "tagRegex": {
              "type": "string"
            }
          }
        },
        {
          "if": {
            "properties": {
              "repositoryFormat": {
                "const": "docker"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/NexusRegistryDockerConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "repositoryFormat": {
                "const": "maven"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/NexusRegistryMavenConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "repositoryFormat": {
                "const": "npm"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/NexusRegistryNpmConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "repositoryFormat": {
                "const": "nuget"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/NexusRegistryNugetConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "repositoryFormat": {
                "const": "raw"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/NexusRegistryRawConfig"
              }
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "tagRegex"
              ]
            },
            {
              "required": [
                "tag"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NexusRegistryArtifactConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "repository",
            "repositoryFormat"
          ],
          "properties": {
            "artifactPath": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "repository": {
              "type": "string"
            },
            "repositoryFormat": {
              "type": "string",
              "enum": [
                "docker",
                "maven",
                "npm",
                "nuget",
                "raw"
              ]
            },
            "repositoryPort": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "repositoryUrl": {
              "type": "string"
            },
            "tag": {
              "type": "string"
            },
            "tagRegex": {
              "type": "string"
            }
          }
        },
        {
          "if": {
            "properties": {
              "repositoryFormat": {
                "const": "docker"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/NexusRegistryDockerConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "repositoryFormat": {
                "const": "maven"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/NexusRegistryMavenConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "repositoryFormat": {
                "const": "npm"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/NexusRegistryNpmConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "repositoryFormat": {
                "const": "nuget"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/NexusRegistryNugetConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "repositoryFormat": {
                "const": "raw"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/NexusRegistryRawConfig"
              }
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "tagRegex"
              ]
            },
            {
              "required": [
                "tag"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NexusRegistryConfigSpec": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NexusRegistryDockerConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/NexusRegistryConfigSpec"
        },
        {
          "type": "object",
          "required": [
            "artifactPath"
          ],
          "properties": {
            "artifactPath": {
              "type": "string"
            },
            "repositoryPort": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "repositoryUrl": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "repositoryPort"
              ]
            },
            {
              "required": [
                "repositoryUrl"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NexusRegistryMavenConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/NexusRegistryConfigSpec"
        },
        {
          "type": "object",
          "required": [
            "artifactId",
            "groupId"
          ],
          "properties": {
            "artifactId": {
              "type": "string"
            },
            "classifier": {
              "type": "string"
            },
            "extension": {
              "type": "string"
            },
            "groupId": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NexusRegistryNpmConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/NexusRegistryConfigSpec"
        },
        {
          "type": "object",
          "required": [
            "packageName"
          ],
          "properties": {
            "packageName": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NexusRegistryNugetConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/NexusRegistryConfigSpec"
        },
        {
          "type": "object",
          "required": [
            "packageName"
          ],
          "properties": {
            "packageName": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NexusRegistryRawConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/NexusRegistryConfigSpec"
        },
        {
          "type": "object",
          "required": [
            "group"
          ],
          "properties": {
            "group": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NumberNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/NGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "default": {
              "type": "number",
              "format": "double"
            },
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_\\.$]{0,63}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "Number"
              ]
            },
            "value": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double"
                },
                {
                  "type": "string",
                  "pattern": "((^[+-]?[0-9]*\\.?[0-9]+$)|(<\\+.+>.*))"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OciHelmChartConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/StoreConfig"
        },
        {
          "type": "object",
          "properties": {
            "basePath": {
              "type": "string"
            },
            "config": {
              "$ref": "#/definitions/OciHelmChartStoreConfigWrapper"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OciHelmChartStoreConfig": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OciHelmChartStoreConfigWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "metadata": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "Generic"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Generic"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/OciHelmChartStoreGenericConfig"
              }
            }
          }
        }
      ]
    },
    "OciHelmChartStoreGenericConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/OciHelmChartStoreConfig"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ParameterFieldString"
                },
                {
                  "type": "string"
                }
              ]
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OnFailureConfig": {
      "type": "object",
      "required": [
        "action",
        "errors"
      ],
      "properties": {
        "action": {
          "oneOf": [
            {
              "$ref": "#/definitions/AbortFailureActionConfig"
            },
            {
              "$ref": "#/definitions/IgnoreFailureActionConfig"
            },
            {
              "$ref": "#/definitions/ManualInterventionFailureActionConfig"
            },
            {
              "$ref": "#/definitions/MarkAsSuccessFailureActionConfig"
            },
            {
              "$ref": "#/definitions/PipelineRollbackFailureActionConfig"
            },
            {
              "$ref": "#/definitions/ProceedWithDefaultValuesFailureActionConfig"
            },
            {
              "$ref": "#/definitions/RetryFailureActionConfig"
            },
            {
              "$ref": "#/definitions/StageRollbackFailureActionConfig"
            },
            {
              "$ref": "#/definitions/StepGroupFailureActionConfig"
            }
          ]
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Unknown",
              "AllErrors",
              "Authentication",
              "Connectivity",
              "Timeout",
              "Authorization",
              "Verification",
              "DelegateProvisioning",
              "PolicyEvaluationFailure",
              "InputTimeoutError",
              "ApprovalRejection"
            ]
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OnRetryFailureConfig": {
      "type": "object",
      "properties": {
        "action": {
          "oneOf": [
            {
              "$ref": "#/definitions/AbortFailureActionConfig"
            },
            {
              "$ref": "#/definitions/IgnoreFailureActionConfig"
            },
            {
              "$ref": "#/definitions/ManualInterventionFailureActionConfig"
            },
            {
              "$ref": "#/definitions/MarkAsSuccessFailureActionConfig"
            },
            {
              "$ref": "#/definitions/PipelineRollbackFailureActionConfig"
            },
            {
              "$ref": "#/definitions/ProceedWithDefaultValuesFailureActionConfig"
            },
            {
              "$ref": "#/definitions/RetryFailureActionConfig"
            },
            {
              "$ref": "#/definitions/StageRollbackFailureActionConfig"
            },
            {
              "$ref": "#/definitions/StepGroupFailureActionConfig"
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OnTimeoutConfig": {
      "type": "object",
      "properties": {
        "action": {
          "oneOf": [
            {
              "$ref": "#/definitions/AbortFailureActionConfig"
            },
            {
              "$ref": "#/definitions/IgnoreFailureActionConfig"
            },
            {
              "$ref": "#/definitions/ManualInterventionFailureActionConfig"
            },
            {
              "$ref": "#/definitions/MarkAsSuccessFailureActionConfig"
            },
            {
              "$ref": "#/definitions/PipelineRollbackFailureActionConfig"
            },
            {
              "$ref": "#/definitions/ProceedWithDefaultValuesFailureActionConfig"
            },
            {
              "$ref": "#/definitions/RetryFailureActionConfig"
            },
            {
              "$ref": "#/definitions/StageRollbackFailureActionConfig"
            },
            {
              "$ref": "#/definitions/StepGroupFailureActionConfig"
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OpenshiftManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "paramsPaths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "skipResourceVersioning": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ParameterFieldBoolean"
                },
                {
                  "type": "string"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OpenshiftParamManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OverlayConfiguration": {
      "type": "object",
      "required": [
        "kustomizeYamlFolderPath"
      ],
      "properties": {
        "kustomizeYamlFolderPath": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParallelStepElementConfig": {
      "type": "object",
      "required": [
        "sections"
      ],
      "properties": {
        "sections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionWrapperConfig"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterField": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "object"
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "object"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldBoolean": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "boolean"
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "boolean"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldListAMIFilter": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AMIFilter"
          }
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AMIFilter"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldListAMITag": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AMITag"
          }
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AMITag"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldMapStringString": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldString": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "string"
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PdcInfrastructure": {
      "allOf": [
        {
          "$ref": "#/definitions/Infrastructure"
        },
        { }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "credentialsRef",
            "hostFilter",
            "connectorRef"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "credentialsRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "hostFilter": {
              "$ref": "#/definitions/HostFilter"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "credentialsRef",
            "hostFilter",
            "hosts"
          ],
          "properties": {
            "credentialsRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "hostFilter": {
              "$ref": "#/definitions/HostFilter"
            },
            "hosts": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "PercentageCapacitySpec": {
      "allOf": [
        {
          "$ref": "#/definitions/CapacitySpec"
        },
        {
          "type": "object",
          "properties": {
            "percentage": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0,
                  "maximum": 100
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PercentageInstanceSelection": {
      "allOf": [
        {
          "$ref": "#/definitions/InstanceSelectionBase"
        },
        {
          "type": "object",
          "properties": {
            "percentage": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ParameterFieldString"
                },
                {
                  "type": "string"
                },
                {
                  "type": "number"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PipelineInfrastructure": {
      "type": "object",
      "properties": {
        "allowSimultaneousDeployments": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "environment": {
          "$ref": "#/definitions/EnvironmentYaml"
        },
        "environmentRef": {
          "type": "string"
        },
        "infrastructureDefinition": {
          "$ref": "#/definitions/InfrastructureDef"
        },
        "infrastructureKey": {
          "type": "string"
        },
        "useFromStage": {
          "$ref": "#/definitions/InfraUseFromStage"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "environment"
              ]
            },
            {
              "required": [
                "environmentRef"
              ]
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "useFromStage"
              ]
            },
            {
              "required": [
                "infrastructureDefinition"
              ]
            }
          ]
        }
      ]
    },
    "PipelineRollbackFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "PipelineRollback"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PrimaryArtifact": {
      "type": "object",
      "properties": {
        "primaryArtifactRef": {
          "type": "string"
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArtifactSource"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "DockerRegistry",
            "Gcr",
            "Ecr",
            "Nexus3Registry",
            "Nexus2Registry",
            "ArtifactoryRegistry",
            "CustomArtifact",
            "Acr",
            "Jenkins",
            "AmazonS3",
            "GoogleArtifactRegistry",
            "GithubPackageRegistry",
            "AzureArtifacts",
            "AmazonMachineImage"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Acr"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/AcrArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AmazonMachineImage"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/AMIArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AmazonS3"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/AmazonS3ArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ArtifactoryRegistry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ArtifactoryRegistryArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AzureArtifacts"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/AzureArtifactsConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "CustomArtifact"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/CustomArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "DockerRegistry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/DockerHubArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Ecr"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/EcrArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Gcr"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/GcrArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "GithubPackageRegistry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/GithubPackagesArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "GoogleArtifactRegistry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/GoogleArtifactRegistryConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Jenkins"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/JenkinsArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Nexus2Registry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/Nexus2RegistryArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Nexus3Registry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/NexusRegistryArtifactConfig"
              }
            }
          }
        }
      ]
    },
    "ProceedWithDefaultValuesFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "ProceedWithDefaultValues"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ReleaseRepoManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoteCloudformationTagsFileSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/CloudformationTagsFileSpec"
        },
        {
          "type": "object",
          "required": [
            "store"
          ],
          "properties": {
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoteCloudformationTemplateFileSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/CloudformationTemplateFileSpec"
        },
        {
          "type": "object",
          "required": [
            "store"
          ],
          "properties": {
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoteTerraformBackendConfigSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/TerraformBackendConfigSpec"
        },
        {
          "type": "object",
          "required": [
            "store"
          ],
          "properties": {
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoteTerraformVarFileSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/TerraformVarFileSpec"
        },
        {
          "type": "object",
          "required": [
            "store"
          ],
          "properties": {
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoteTerragruntBackendConfigSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/TerragruntBackendConfigSpec"
        },
        {
          "type": "object",
          "required": [
            "store"
          ],
          "properties": {
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoteTerragruntVarFileSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/TerragruntVarFileSpec"
        },
        {
          "type": "object",
          "required": [
            "store"
          ],
          "properties": {
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RetryFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "readOnly": true,
              "$ref": "#/definitions/RetryFailureSpecConfig"
            },
            "type": {
              "type": "string",
              "enum": [
                "Retry"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RetryFailureSpecConfig": {
      "type": "object",
      "required": [
        "onRetryFailure",
        "retryCount",
        "retryIntervals"
      ],
      "properties": {
        "onRetryFailure": {
          "$ref": "#/definitions/OnRetryFailureConfig"
        },
        "retryCount": {
          "type": "integer",
          "format": "int32"
        },
        "retryIntervals": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "maxItems": 2147483647,
          "minItems": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "S3StoreConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/StoreConfig"
        },
        {
          "type": "object",
          "properties": {
            "bucketName": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "folderPath": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "paths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "region": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "S3UrlCloudformationTemplateFileSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/CloudformationTemplateFileSpec"
        },
        {
          "type": "object",
          "required": [
            "templateUrl"
          ],
          "properties": {
            "templateUrl": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "S3UrlStoreConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/StoreConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "region",
            "urls"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "region": {
              "type": "string"
            },
            "urls": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ScriptCommandUnitSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/CommandUnitBaseSpec"
        },
        {
          "type": "object",
          "required": [
            "shell",
            "source"
          ],
          "properties": {
            "shell": {
              "type": "string",
              "enum": [
                "Bash",
                "PowerShell"
              ]
            },
            "source": {
              "$ref": "#/definitions/ShellScriptSourceWrapper"
            },
            "tailFiles": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TailFilePattern"
              }
            },
            "workingDirectory": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SecretNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/NGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "default": {
              "type": "string"
            },
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_\\.$]{0,63}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "Secret"
              ]
            },
            "value": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServerlessAwsLambdaDeployStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "commandOptions": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServerlessAwsLambdaInfrastructure": {
      "allOf": [
        {
          "$ref": "#/definitions/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "region",
            "stage"
          ],
          "properties": {
            "connectorRef": {
              "type": "string",
              "minLength": 1
            },
            "metadata": {
              "type": "string"
            },
            "region": {
              "type": "string",
              "minLength": 1
            },
            "stage": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServerlessAwsLambdaManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "configOverridePath": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServerlessAwsLambdaRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServerlessAwsLambdaServiceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ServiceSpec"
        },
        {
          "type": "object",
          "properties": { }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceConfig": {
      "type": "object",
      "properties": {
        "service": {
          "$ref": "#/definitions/ServiceYaml"
        },
        "serviceDefinition": {
          "$ref": "#/definitions/ServiceDefinition"
        },
        "serviceRef": {
          "type": "string"
        },
        "stageOverrides": {
          "$ref": "#/definitions/StageOverridesConfig"
        },
        "useFromStage": {
          "$ref": "#/definitions/ServiceUseFromStage"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "useFromStage"
              ]
            },
            {
              "required": [
                "service"
              ]
            },
            {
              "required": [
                "serviceRef"
              ]
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "useFromStage"
              ]
            },
            {
              "required": [
                "serviceDefinition"
              ]
            }
          ]
        }
      ]
    },
    "ServiceDefinition": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Kubernetes",
            "NativeHelm",
            "Ssh",
            "WinRm",
            "ServerlessAwsLambda",
            "AzureWebApp",
            "CustomDeployment",
            "ECS",
            "Elastigroup",
            "TAS",
            "Asg"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Asg"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/AsgServiceSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AzureWebApp"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/AzureWebAppServiceSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "CustomDeployment"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/CustomDeploymentServiceSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ECS"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/EcsServiceSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Elastigroup"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ElastigroupServiceSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Kubernetes"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/KubernetesServiceSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "NativeHelm"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/NativeHelmServiceSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ServerlessAwsLambda"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ServerlessAwsLambdaServiceSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Ssh"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/SshServiceSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "TAS"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/TanzuApplicationServiceSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "WinRm"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/WinRmServiceSpec"
              }
            }
          }
        }
      ]
    },
    "ServiceOverrides": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceSpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "artifacts": {
          "$ref": "#/definitions/ArtifactListConfig"
        },
        "configFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConfigFileWrapper"
          }
        },
        "manifests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ManifestConfigWrapper"
          }
        },
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NGVariable"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceUseFromStage": {
      "type": "object",
      "required": [
        "stage"
      ],
      "properties": {
        "metadata": {
          "type": "string"
        },
        "overrides": {
          "$ref": "#/definitions/ServiceOverrides"
        },
        "stage": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceUseFromStageV2": {
      "type": "object",
      "required": [
        "stage"
      ],
      "properties": {
        "metadata": {
          "type": "string"
        },
        "stage": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceYaml": {
      "type": "object",
      "required": [
        "identifier",
        "name"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceYamlV2": {
      "type": "object",
      "properties": {
        "serviceInputs": {
          "oneOf": [
            {
              "$ref": "#/definitions/JsonNode"
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "serviceRef": {
          "type": "string"
        },
        "useFromStage": {
          "$ref": "#/definitions/ServiceUseFromStageV2"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "useFromStage"
              ]
            },
            {
              "required": [
                "serviceRef"
              ]
            }
          ]
        }
      ]
    },
    "ServicesMetadata": {
      "type": "object",
      "properties": {
        "parallel": {
          "type": "boolean"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServicesYaml": {
      "type": "object",
      "properties": {
        "metadata": {
          "readOnly": true,
          "$ref": "#/definitions/ServicesMetadata"
        },
        "values": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceYamlV2"
              }
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptBaseSource": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptInlineSource": {
      "allOf": [
        {
          "$ref": "#/definitions/ShellScriptBaseSource"
        },
        {
          "type": "object",
          "properties": {
            "script": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptProvisionStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "source"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "environmentVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/StringNGVariable"
                  }
                ]
              }
            },
            "source": {
              "$ref": "#/definitions/ShellScriptSourceWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptSourceWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Harness"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/HarnessFileStoreSource"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Inline"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ShellScriptInlineSource"
              }
            }
          }
        }
      ]
    },
    "SidecarArtifact": {
      "type": "object",
      "required": [
        "identifier"
      ],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$"
        },
        "template": {
          "$ref": "#/definitions/TemplateLinkConfig"
        },
        "type": {
          "type": "string",
          "enum": [
            "DockerRegistry",
            "Gcr",
            "Ecr",
            "Nexus3Registry",
            "Nexus2Registry",
            "ArtifactoryRegistry",
            "CustomArtifact",
            "Acr",
            "Jenkins",
            "AmazonS3",
            "GoogleArtifactRegistry",
            "GithubPackageRegistry",
            "AzureArtifacts",
            "AmazonMachineImage"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Acr"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/AcrArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AmazonMachineImage"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/AMIArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AmazonS3"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/AmazonS3ArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ArtifactoryRegistry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ArtifactoryRegistryArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AzureArtifacts"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/AzureArtifactsConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "CustomArtifact"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/CustomArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "DockerRegistry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/DockerHubArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Ecr"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/EcrArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Gcr"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/GcrArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "GithubPackageRegistry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/GithubPackagesArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "GoogleArtifactRegistry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/GoogleArtifactRegistryConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Jenkins"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/JenkinsArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Nexus2Registry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/Nexus2RegistryArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Nexus3Registry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/NexusRegistryArtifactConfig"
              }
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "template"
              ]
            },
            {
              "required": [
                "spec"
              ]
            }
          ]
        }
      ]
    },
    "SidecarArtifactWrapper": {
      "type": "object",
      "properties": {
        "sidecar": {
          "$ref": "#/definitions/SidecarArtifact"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SshServiceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ServiceSpec"
        },
        {
          "type": "object",
          "properties": { }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SshWinRmAwsInfrastructure": {
      "allOf": [
        {
          "$ref": "#/definitions/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "awsInstanceFilter",
            "connectorRef",
            "credentialsRef",
            "hostConnectionType",
            "region"
          ],
          "properties": {
            "awsInstanceFilter": {
              "$ref": "#/definitions/AwsInstanceFilter"
            },
            "connectorRef": {
              "type": "string",
              "minLength": 1
            },
            "credentialsRef": {
              "type": "string",
              "minLength": 1
            },
            "hostConnectionType": {
              "type": "string",
              "enum": [
                "PublicIP",
                "PrivateIP"
              ],
              "minLength": 1
            },
            "region": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SshWinRmAzureInfrastructure": {
      "allOf": [
        {
          "$ref": "#/definitions/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "credentialsRef",
            "hostConnectionType",
            "resourceGroup",
            "subscriptionId"
          ],
          "properties": {
            "connectorRef": {
              "type": "string",
              "minLength": 1
            },
            "credentialsRef": {
              "type": "string",
              "minLength": 1
            },
            "hostConnectionType": {
              "type": "string",
              "enum": [
                "Hostname",
                "PrivateIP",
                "PublicIP"
              ],
              "minLength": 1
            },
            "resourceGroup": {
              "type": "string",
              "minLength": 1
            },
            "subscriptionId": {
              "type": "string",
              "minLength": 1
            },
            "tags": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StageOverridesConfig": {
      "type": "object",
      "properties": {
        "artifacts": {
          "$ref": "#/definitions/ArtifactListConfig"
        },
        "configFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConfigFileWrapper"
          }
        },
        "manifests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ManifestConfigWrapper"
          }
        },
        "variables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/StringNGVariable"
              }
            ]
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StageRollbackFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "StageRollback"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StageWhenCondition": {
      "type": "object",
      "required": [
        "pipelineStatus"
      ],
      "properties": {
        "condition": {
          "type": "string"
        },
        "pipelineStatus": {
          "type": "string",
          "enum": [
            "Success",
            "Failure",
            "All"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StartupCommandConfiguration": {
      "type": "object",
      "required": [
        "store"
      ],
      "properties": {
        "metadata": {
          "type": "string"
        },
        "store": {
          "$ref": "#/definitions/StoreConfigWrapper"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StartupScriptConfiguration": {
      "type": "object",
      "required": [
        "store"
      ],
      "properties": {
        "metadata": {
          "type": "string"
        },
        "store": {
          "$ref": "#/definitions/StoreConfigWrapper"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepElementConfig": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "failureStrategies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FailureStrategyConfig"
          }
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,63}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$"
        },
        "strategy": {
          "$ref": "#/definitions/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
        },
        "type": {
          "type": "string"
        },
        "when": {
          "$ref": "#/definitions/StepWhenCondition"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "AzureARMRollback"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/AzureARMRollbackStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AzureCreateARMResource"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/AzureCreateARMResourceStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AzureCreateBPResource"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/AzureCreateBPStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AzureSlotDeployment"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/AzureWebAppSlotDeploymentStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AzureSwapSlot"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/AzureWebAppSwapSlotStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AzureTrafficShift"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/AzureWebAppTrafficShiftStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AzureWebAppRollback"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/AzureWebAppRollbackStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Chaos"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ChaosStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Command"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/CommandStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "CreatePR"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/CreatePRStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "CreateStack"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/CloudformationCreateStackStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "DeleteStack"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/CloudformationDeleteStackStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "EcsBlueGreenCreateService"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/EcsBlueGreenCreateServiceStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "EcsBlueGreenRollback"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/EcsBlueGreenRollbackStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "EcsBlueGreenSwapTargetGroups"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/EcsBlueGreenSwapTargetGroupsStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "EcsCanaryDelete"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/EcsCanaryDeleteStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "EcsCanaryDeploy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/EcsCanaryDeployStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "EcsRollingDeploy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/EcsRollingDeployStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "EcsRollingRollback"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/EcsRollingRollbackStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "EcsRunTask"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/EcsRunTaskStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ElastigroupDeploy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ElastigroupDeployStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ElastigroupRollback"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ElastigroupRollbackStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ElastigroupSetup"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ElastigroupSetupStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "FetchInstanceScript"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/FetchInstanceScriptStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "GitOpsFetchLinkedApps"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/FetchLinkedAppsStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "GitOpsUpdateReleaseRepo"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/UpdateReleaseRepoStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "HelmDeploy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/HelmDeployStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "HelmRollback"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/HelmRollbackStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "JenkinsBuild"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/JenkinsBuildStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "K8sApply"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/K8sApplyStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "K8sBGSwapServices"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/K8sBGSwapServicesStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "K8sBlueGreenDeploy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/K8sBlueGreenStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "K8sCanaryDelete"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/K8sCanaryDeleteStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "K8sCanaryDeploy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/K8sCanaryStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "K8sDelete"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/K8sDeleteStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "K8sRollingDeploy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/K8sRollingStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "K8sRollingRollback"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/K8sRollingRollbackStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "K8sScale"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/K8sScaleStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "MergePR"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/MergePRStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "RollbackStack"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/CloudformationRollbackStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ServerlessAwsLambdaDeploy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ServerlessAwsLambdaDeployStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ServerlessAwsLambdaRollback"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ServerlessAwsLambdaRollbackStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ShellScriptProvision"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ShellScriptProvisionStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "TerraformApply"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/TerraformApplyStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "TerraformDestroy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/TerraformDestroyStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "TerraformPlan"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/TerraformPlanStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "TerraformRollback"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/TerraformRollbackStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "TerragruntApply"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/TerragruntApplyStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "TerragruntDestroy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/TerragruntDestroyStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "TerragruntPlan"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/TerragruntPlanStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "TerragruntRollback"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/TerragruntRollbackStepInfo"
              }
            }
          }
        }
      ]
    },
    "StepGroupElementConfig": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "steps"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "failureStrategies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FailureStrategyConfig"
          }
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,63}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$"
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionWrapperConfig"
          },
          "maxItems": 2147483647,
          "minItems": 1
        },
        "strategy": {
          "$ref": "#/definitions/StrategyConfig"
        },
        "when": {
          "$ref": "#/definitions/StepWhenCondition"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepGroupFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "StepGroupRollback"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepSpecType": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepTemplateRef": {
      "type": "object",
      "required": [
        "templateRef"
      ],
      "properties": {
        "templateRef": {
          "type": "string"
        },
        "versionLabel": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepWhenCondition": {
      "type": "object",
      "required": [
        "stageStatus"
      ],
      "properties": {
        "condition": {
          "type": "string"
        },
        "stageStatus": {
          "type": "string",
          "enum": [
            "Success",
            "Failure",
            "All"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StoreConfig": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StoreConfigWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "metadata": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "CustomRemote",
            "Git",
            "Github",
            "Bitbucket",
            "GitLab",
            "Http",
            "S3",
            "Gcs",
            "Inline",
            "Artifactory",
            "S3Url",
            "InheritFromManifest",
            "Harness",
            "OciHelmChart",
            "AzureRepo"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Artifactory"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ArtifactoryStoreConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AzureRepo"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/AzureRepoStore"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Bitbucket"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/BitbucketStore"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "CustomRemote"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/CustomRemoteStoreConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Gcs"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/GcsStoreConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Git"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/GitStore"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "GitLab"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/GitLabStore"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Github"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/GithubStore"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Harness"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/HarnessStore"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Http"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/HttpStoreConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "InheritFromManifest"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/InheritFromManifestStoreConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Inline"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/InlineStoreConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "OciHelmChart"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/OciHelmChartConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "S3"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/S3StoreConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "S3Url"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/S3UrlStoreConfig"
              }
            }
          }
        }
      ]
    },
    "StoreConfigWrapperParameters": {
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/StoreConfig"
        },
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StrategyConfig": {
      "type": "object",
      "properties": {
        "matrix": {
          "$ref": "#/definitions/MatrixConfigInterface"
        },
        "parallelism": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "repeat": {
          "$ref": "#/definitions/HarnessForConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "repeat"
              ]
            },
            {
              "required": [
                "parallelism"
              ]
            },
            {
              "required": [
                "matrix"
              ]
            }
          ]
        }
      ]
    },
    "StringNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/NGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "default": {
              "type": "string"
            },
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_\\.$]{0,63}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "String"
              ]
            },
            "value": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TagsFilter": {
      "allOf": [
        {
          "$ref": "#/definitions/FilterSpec"
        },
        {
          "type": "object",
          "required": [
            "matchType",
            "tags"
          ],
          "properties": {
            "matchType": {
              "type": "string",
              "enum": [
                "all",
                "any"
              ]
            },
            "tags": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TailFilePattern": {
      "type": "object",
      "properties": {
        "tailFile": {
          "oneOf": [
            {
              "$ref": "#/definitions/ParameterFieldString"
            },
            {
              "type": "string"
            }
          ]
        },
        "tailPattern": {
          "oneOf": [
            {
              "$ref": "#/definitions/ParameterFieldString"
            },
            {
              "type": "string"
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TanzuApplicationServiceInfrastructure": {
      "allOf": [
        {
          "$ref": "#/definitions/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "organization",
            "space"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "organization": {
              "type": "string"
            },
            "space": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TanzuApplicationServiceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ServiceSpec"
        },
        {
          "type": "object",
          "properties": { }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TasManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "autoScalerPath": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "cfCliVersion": {
              "type": "string",
              "enum": [
                "V7"
              ]
            },
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            },
            "varsPaths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TemplateLinkConfig": {
      "type": "object",
      "required": [
        "templateRef"
      ],
      "properties": {
        "templateInputs": {
          "$ref": "#/definitions/JsonNode"
        },
        "templateRef": {
          "type": "string"
        },
        "templateVariables": {
          "$ref": "#/definitions/JsonNode"
        },
        "versionLabel": {
          "type": "string",
          "pattern": "^[0-9a-zA-Z][^\\s]{0,63}$"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformApplyStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "configuration",
            "provisionerIdentifier"
          ],
          "properties": {
            "configuration": {
              "$ref": "#/definitions/TerraformStepConfiguration"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "metadata": {
              "type": "string"
            },
            "provisionerIdentifier": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformBackendConfig": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Inline"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/InlineTerraformBackendConfigSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Remote"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/RemoteTerraformBackendConfigSpec"
              }
            }
          }
        }
      ]
    },
    "TerraformBackendConfigSpec": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformConfigFilesWrapper": {
      "type": "object",
      "required": [
        "store"
      ],
      "properties": {
        "moduleSource": {
          "$ref": "#/definitions/ModuleSource"
        },
        "store": {
          "$ref": "#/definitions/StoreConfigWrapper"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformDestroyStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "configuration",
            "provisionerIdentifier"
          ],
          "properties": {
            "configuration": {
              "$ref": "#/definitions/TerraformStepConfiguration"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "metadata": {
              "type": "string"
            },
            "provisionerIdentifier": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformExecutionData": {
      "type": "object",
      "required": [
        "configFiles"
      ],
      "properties": {
        "backendConfig": {
          "$ref": "#/definitions/TerraformBackendConfig"
        },
        "configFiles": {
          "$ref": "#/definitions/TerraformConfigFilesWrapper"
        },
        "environmentVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/StringNGVariable"
              }
            ]
          }
        },
        "targets": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "varFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TerraformVarFileWrapper"
          }
        },
        "workspace": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformPlanExecutionData": {
      "type": "object",
      "required": [
        "command",
        "configFiles",
        "secretManagerRef"
      ],
      "properties": {
        "backendConfig": {
          "$ref": "#/definitions/TerraformBackendConfig"
        },
        "command": {
          "type": "string",
          "enum": [
            "Apply",
            "Destroy"
          ]
        },
        "configFiles": {
          "$ref": "#/definitions/TerraformConfigFilesWrapper"
        },
        "environmentVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/StringNGVariable"
              }
            ]
          }
        },
        "exportTerraformHumanReadablePlan": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "exportTerraformPlanJson": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "secretManagerRef": {
          "type": "string"
        },
        "targets": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "varFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TerraformVarFileWrapper"
          }
        },
        "workspace": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformPlanStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "configuration",
            "provisionerIdentifier"
          ],
          "properties": {
            "configuration": {
              "$ref": "#/definitions/TerraformPlanExecutionData"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "provisionerIdentifier": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "provisionerIdentifier"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "provisionerIdentifier": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformStepConfiguration": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "spec": {
          "$ref": "#/definitions/TerraformExecutionData"
        },
        "type": {
          "type": "string",
          "enum": [
            "Inline",
            "InheritFromPlan",
            "InheritFromApply"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformVarFile": {
      "type": "object",
      "required": [
        "identifier",
        "spec",
        "type"
      ],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Inline"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/InlineTerraformVarFileSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Remote"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/RemoteTerraformVarFileSpec"
              }
            }
          }
        }
      ]
    },
    "TerraformVarFileSpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformVarFileWrapper": {
      "type": "object",
      "required": [
        "varFile"
      ],
      "properties": {
        "varFile": {
          "$ref": "#/definitions/TerraformVarFile"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerragruntApplyStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "configuration",
            "provisionerIdentifier"
          ],
          "properties": {
            "configuration": {
              "$ref": "#/definitions/TerragruntStepConfiguration"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "metadata": {
              "type": "string"
            },
            "provisionerIdentifier": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerragruntBackendConfig": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Inline"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/InlineTerragruntBackendConfigSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Remote"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/RemoteTerragruntBackendConfigSpec"
              }
            }
          }
        }
      ]
    },
    "TerragruntBackendConfigSpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerragruntConfigFilesWrapper": {
      "type": "object",
      "required": [
        "store"
      ],
      "properties": {
        "moduleSource": {
          "$ref": "#/definitions/ModuleSource"
        },
        "store": {
          "$ref": "#/definitions/StoreConfigWrapper"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerragruntDestroyStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "configuration",
            "provisionerIdentifier"
          ],
          "properties": {
            "configuration": {
              "$ref": "#/definitions/TerragruntStepConfiguration"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "metadata": {
              "type": "string"
            },
            "provisionerIdentifier": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerragruntExecutionData": {
      "type": "object",
      "required": [
        "configFiles",
        "moduleConfig"
      ],
      "properties": {
        "backendConfig": {
          "$ref": "#/definitions/TerragruntBackendConfig"
        },
        "configFiles": {
          "$ref": "#/definitions/TerragruntConfigFilesWrapper"
        },
        "environmentVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/StringNGVariable"
              }
            ]
          }
        },
        "moduleConfig": {
          "$ref": "#/definitions/TerragruntModuleConfig"
        },
        "targets": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "varFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TerragruntVarFileWrapper"
          }
        },
        "workspace": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerragruntModuleConfig": {
      "type": "object",
      "required": [
        "terragruntRunType"
      ],
      "properties": {
        "path": {
          "type": "string"
        },
        "terragruntRunType": {
          "type": "string",
          "enum": [
            "RunAll",
            "RunModule"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerragruntPlanExecutionData": {
      "type": "object",
      "required": [
        "command",
        "configFiles",
        "moduleConfig",
        "secretManagerRef"
      ],
      "properties": {
        "backendConfig": {
          "$ref": "#/definitions/TerragruntBackendConfig"
        },
        "command": {
          "type": "string",
          "enum": [
            "Apply",
            "Destroy"
          ]
        },
        "configFiles": {
          "$ref": "#/definitions/TerragruntConfigFilesWrapper"
        },
        "environmentVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/StringNGVariable"
              }
            ]
          }
        },
        "exportTerragruntPlanJson": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "moduleConfig": {
          "$ref": "#/definitions/TerragruntModuleConfig"
        },
        "secretManagerRef": {
          "type": "string"
        },
        "targets": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "varFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TerragruntVarFileWrapper"
          }
        },
        "workspace": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerragruntPlanStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "configuration",
            "provisionerIdentifier"
          ],
          "properties": {
            "configuration": {
              "$ref": "#/definitions/TerragruntPlanExecutionData"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "provisionerIdentifier": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerragruntRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "provisionerIdentifier"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "provisionerIdentifier": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerragruntStepConfiguration": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "spec": {
          "$ref": "#/definitions/TerragruntExecutionData"
        },
        "type": {
          "type": "string",
          "enum": [
            "Inline",
            "InheritFromPlan",
            "InheritFromApply"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerragruntVarFile": {
      "type": "object",
      "required": [
        "identifier",
        "spec",
        "type"
      ],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Inline"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/InlineTerragruntVarFileSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Remote"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/RemoteTerragruntVarFileSpec"
              }
            }
          }
        }
      ]
    },
    "TerragruntVarFileSpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerragruntVarFileWrapper": {
      "type": "object",
      "required": [
        "varFile"
      ],
      "properties": {
        "varFile": {
          "$ref": "#/definitions/TerragruntVarFile"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "UpdateReleaseRepoStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "stringMap": {
              "$ref": "#/definitions/ParameterFieldMapStringString"
            },
            "variables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/StringNGVariable"
                  }
                ]
              }
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ValuesManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "VarsManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "WinRmServiceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ServiceSpec"
        },
        {
          "type": "object",
          "properties": {
            "artifactOverrideSets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ArtifactOverrideSetWrapper"
              }
            },
            "configFileOverrideSets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ConfigFileOverrideSetWrapper"
              }
            },
            "manifestOverrideSets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ManifestOverrideSetWrapper"
              }
            },
            "variableOverrideSets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NGVariableOverrideSetWrapper"
              }
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  }
}