// Copyright 2021 Harness Inc. All rights reserved.
// Use of this source code is governed by the PolyForm Free Trial 1.0.0 license
// that can be found in the licenses directory at the root of this repository, also available at
// https://polyformproject.org/wp-content/uploads/2020/05/PolyForm-Free-Trial-1.0.0.txt.

syntax = "proto3";

package io.harness.gitsync;

import "google/protobuf/wrappers.proto";
import "970-ng-commons/src/main/proto/io/harness/eventsframework/schemas/entity/entity_detail.proto";
import "970-ng-commons/src/main/proto/io/harness/eventsframework/schemas/entity/entity_scope_info.proto";
import "970-ng-commons/src/main/proto/io/harness/scope_identifiers.proto";
import "io/harness/gitsync/change_type.proto";
import "980-commons/src/main/proto/io/harness/security/principal.proto";

option java_multiple_files = true;

service HarnessToGitPushInfoService {
  rpc pushFromHarness(PushInfo) returns (PushResponse);
  rpc pushFile(FileInfo) returns (PushFileResponse);
  rpc isGitSyncEnabledForScope(io.harness.eventsframework.schemas.entity.EntityScopeInfo) returns (IsGitSyncEnabled);
  rpc isGitSimplificationEnabledForScope(IsGitSimplificationEnabledRequest) returns (IsGitSimplificationEnabled);
  rpc getDefaultBranch(RepoDetails) returns (BranchDetails);
  rpc getFile(GetFileRequest) returns (GetFileResponse);
  rpc createFile(CreateFileRequest) returns (CreateFileResponse);
  rpc updateFile(UpdateFileRequest) returns (UpdateFileResponse);
  rpc createPullRequest(CreatePRRequest) returns (CreatePRResponse);
  rpc getRepoUrl(GetRepoUrlRequest) returns (GetRepoUrlResponse);
  rpc isOldGitSyncEnabledForModule(IsOldGitSyncEnabledForModule) returns (IsOldGitSyncEnabledResponse);
  rpc getBranchHeadCommitDetails(GetBranchHeadCommitRequest) returns (GetBranchHeadCommitResponse);
  rpc listFiles(ListFilesRequest) returns (ListFilesResponse);
}

message PushInfo {
  string commit_id = 1;
  string file_path = 2;
  io.harness.eventsframework.schemas.entity.EntityDetailProtoDTO entity_detail = 3;
  string account_id = 4;
  string yaml_git_config_id = 5;
  bool is_new_branch = 6;
  string branch_name = 7;
  string folder_path = 8;
  map<string, string> context_map = 9;
  bool is_sync_from_git = 10;
}

message PushResponse {
  bool status = 1;
}

message FileInfo {
  string file_path = 1;
  string yaml_git_config_id = 2;
  io.harness.eventsframework.schemas.entity.EntityDetailProtoDTO entity_detail = 3;
  string account_id = 4;
  string branch = 5;
  bool is_new_branch = 6;
  google.protobuf.StringValue base_branch = 7;
  string folder_path = 8;
  io.harness.security.Principal principal = 9;
  map<string, string> context_map = 10;
  string yaml = 11;
  io.harness.gitsync.ChangeType change_type = 12;
  google.protobuf.StringValue commit_msg = 13;
  google.protobuf.StringValue old_file_sha = 14;
  bool is_full_sync_flow = 15;
  string commit_id = 16;
}

message PushFileResponse {
  // failed = 0; success = 1
  int32 status = 1;
  bool is_default = 2;
  string account_id = 3;
  string defaultBranchName = 4;
  string error = 5;
  int32 scm_response_code = 6;
  string commit_id = 7;
}

message IsGitSyncEnabled {
  bool enabled = 1;
}

message IsGitSimplificationEnabled {
  bool enabled = 1;
}

message IsGitSimplificationEnabledRequest {
  io.harness.eventsframework.schemas.entity.EntityScopeInfo entityScopeInfo = 1;
  bool isNotForFFModule = 2;
  // set it to false only for feature flag module,
  // by default, we will show old git exp for feature flag module
}

message RepoDetails {
  string yaml_git_config_id = 1;
  string account_id = 2;
  google.protobuf.StringValue org_identifier = 3;
  google.protobuf.StringValue project_identifier = 4;
  map<string, string> context_map = 5;
}

message BranchDetails {
  string default_branch = 1;
  string error = 2;
}

message GetFileRequest {
  string repoName = 1;
  string branchName = 2;
  string filePath = 3;
  string connectorRef = 5;
  ScopeIdentifiers scopeIdentifiers = 6;
  map<string, string> contextMap = 7;
  io.harness.security.Principal principal = 8;
  CacheRequestParams cacheRequestParams = 9;
  EntityType entityType = 10;
}

message GetFileResponse {
  int32 statusCode = 1;
  string fileContent = 2;
  ErrorDetails error = 3;
  GitMetaData gitMetaData = 4;
  CacheResponseParams cacheResponse = 5;
}

message CreateFileRequest {
  string repoName = 1;
  string branchName = 2;
  string filePath = 3;
  string connectorRef = 4;
  string fileContent = 5;
  bool isCommitToNewBranch = 6;
  string baseBranchName = 7;
  string commitMessage = 8;
  ScopeIdentifiers scopeIdentifiers = 12;
  map<string, string> contextMap = 13;
  io.harness.security.Principal principal = 14;
}

message CreateFileResponse {
  int32 statusCode = 1;
  ErrorDetails error = 2;
  GitMetaData gitMetaData = 3;
}

message UpdateFileRequest {
  string repoName = 1;
  string branchName = 2;
  string filePath = 3;
  string connectorRef = 4;
  string fileContent = 5;
  bool isCommitToNewBranch = 6;
  string baseBranchName = 7;
  string commitMessage = 8;
  string oldFileSha = 9;
  string oldCommitId = 10;
  ScopeIdentifiers scopeIdentifiers = 12;
  map<string, string> contextMap = 13;
  io.harness.security.Principal principal = 14;
}

message UpdateFileResponse {
  int32 statusCode = 1;
  ErrorDetails error = 2;
  GitMetaData gitMetaData = 3;
}

message CreatePRRequest {
  string sourceBranch = 1;
  string targetBranch = 2;
  string title = 3;
  string repoName = 4;
  string connectorRef = 5;
  ScopeIdentifiers scopeIdentifiers = 6;
  map<string, string> contextMap = 7;
  io.harness.security.Principal principal = 8;
}

message CreatePRResponse {
  int32 statusCode = 1;
  int32 prNumber = 2;
  ErrorDetails error = 3;
}

message GetRepoUrlRequest {
  string connectorRef = 1;
  string repoName = 2;
  ScopeIdentifiers scopeIdentifiers = 3;
  map<string, string> contextMap = 4;
}

message GetRepoUrlResponse {
  int32 statusCode = 1;
  string repoUrl = 2;
  ErrorDetails error = 3;
}

message GitMetaData {
  string repoName = 1;
  string branchName = 2;
  string commitId = 3;
  string filePath = 4;
  string blobId = 5;
  string fileUrl = 6;
  string repoUrl = 7;
}

message ErrorDetails {
  string errorMessage = 1;
  string explanationMessage = 2;
  string hintMessage = 3;
}

message IsOldGitSyncEnabledForModule {
  io.harness.eventsframework.schemas.entity.EntityScopeInfo entityScopeInfo = 1;
  bool isNotFFModule = 2;
}

message IsOldGitSyncEnabledResponse {
  bool isEnabled = 1;
}

message GetBranchHeadCommitRequest {
  string repoName = 1;
  string branchName = 2;
  string connectorRef = 3;
  ScopeIdentifiers scopeIdentifiers = 4;
  map<string, string> contextMap = 5;
}

message GetBranchHeadCommitResponse {
  int32 statusCode = 1;
  string sha = 2;
  string message = 3;
  string link = 4;
  ErrorDetails error = 5;
}

message ListFilesRequest {
  string repoName = 1;
  string ref = 2;
  string connectorRef = 3;
  string fileDirectoryPath = 4;
  ScopeIdentifiers scopeIdentifiers = 5;
  map<string, string> contextMap = 6;
}

message ListFilesResponse {
  int32 statusCode = 1;
  repeated FileGitDetails fileGitDetails = 2;
  ErrorDetails error = 3;
}

message FileGitDetails {
  string path = 1;
  string commitId = 2;
  string blobId = 3;
  ContentType contentType = 4;
}

message CacheRequestParams {
  bool useCache = 1;
}

message CacheResponseParams {
  CacheState cacheState = 1;
  uint64 lastUpdateAt = 2;
  uint64 ttlLeft = 3;
}

enum ContentType {
  INVALID_CONTENT_TYPE = 0;
  UNKNOWN_CONTENT = 1;
  FILE = 2;
  DIRECTORY = 3;
  SYMLINK = 4;
  GITLINK = 5;
}

enum EntityType {
  UNKNOWN_ENTITY = 0;
  PIPELINE = 1;
  TEMPLATE = 2;
  PIPELINE_INPUT_SETS = 3;
}

enum CacheState {
  UNKNOWN_STATE = 0;
  VALID_CACHE = 1;
  STALE_CACHE = 2;
}