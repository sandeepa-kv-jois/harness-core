Var index = 0
Var one = 1
Var metricRecords = []
foreach query in Env:queries {
    Var metricIdentifier =  Env:metricIdentifiers[Var:index]
    Var metricName = Env:metricNames[Var:index]
    Var jobsUrl = concat(Env:baseUrl, "services/search/jobs/?output_mode=json&exec_mode=blocking")
    Var bodyMap = {}
    Var splunkQuery = concat("search ", Var:query)
    Var:bodyMap.put("search", Var:splunkQuery)
    Var:bodyMap.put("earliest_time", Env:startTimeSeconds)
    Var:bodyMap.put("latest_time", Env:endTimeSeconds)
    Var job = sync-call(url=Var:jobsUrl, header=Env:commonHeaders, body=Var:bodyMap, bodyType=FORM_URL_ENCODED)
    Var jobId = extract(Var:job, $.sid)
    sleep(500)
    Var resultsUrl = concat(Env:baseUrl, "services/search/jobs/", Var:jobId, "/results?output_mode=json")
    Var rawResults = sync-call-with-code(url=Var:resultsUrl, header=Env:commonHeaders)
    Var respCode = Var:rawResults[1]
    Var httpOk = 200
    while Var:respCode not equal to Var:httpOk {
      sleep(1000)
      rawResults = sync-call-with-code(url=Var:resultsUrl, header=Env:commonHeaders)
      respCode = Var:rawResults[1]
      sleep(1000)
    }
    Var resultData = Var:rawResults[0]
    Var results = extract(Var:resultData,$.results)

    foreach rawMetric in Var:results {
        print Var:rawMetric
        Var log = extract(Var:rawMetric, $.time)
        Var timestamp = extract(Var:rawMetric, $.time)
        Var val = extract(Var:rawMetric, $.value)
        Var timeSeriesToReturn = new TimeseriesRecord(txnName=Env:groupName, metricIdentifier=Var:metricIdentifier, metricName=Var:metricName, metricValue=Var:val, timestamp=Var:timestamp)
        Var:metricRecords.append(Var:timeSeriesToReturn)
    }
    index = Var:index + Var:one
}
return Var:metricRecords

