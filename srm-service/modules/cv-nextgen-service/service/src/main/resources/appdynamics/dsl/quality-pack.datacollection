Var auth
if Env:tokenBasedAuth == "true" {
  Var authUrlSuffix = "api/oauth/access_token"
  Var authUrl = concat(Env:baseUrl,Var:authUrlSuffix)
  Var bodyMap = {}
  Var:bodyMap.put("grant_type", "client_credentials")
  Var:bodyMap.put("client_id", Env:clientId)
  Var:bodyMap.put("client_secret", Env:clientSecret)
  Var authResponse = sync-call(url=Var:authUrl, header=Env:commonHeaders, body=Var:bodyMap, bodyType=FORM_URL_ENCODED)
  Var token = extract(Var:authResponse,$.access_token)
  Var bearerStr = concat("Bearer ", Var:token)
  Env:commonHeaders.put("Authorization", Var:bearerStr)

}

Var metricDataUrl = concat(Env:baseUrl, "rest/applications/", Env:applicationName, "/metric-data?output=JSON&time-range-type=BETWEEN_TIMES&rollup=false&start-time=", Env:startTimeMillis, "&end-time=", Env:endTimeMillis, "&metric-path=")
Var metricRequests = []
foreach metricDefinition in Env:metricsToCollect {
  Var metricPath = concat("", Var:metricDefinition)
  Var:metricPath.replaceAll("__tier_name__", Env:tierName)
  if Env:collectHostData != "true" {
      Var:metricPath.replaceAll("__metric_filter__", "*")
  }
  if Env:collectHostData == "true" {
      Var metricFilter = concat("*", "|Individual%20Nodes|*")
      Var:metricPath.replaceAll("__metric_filter__", Var:metricFilter)
  }
  print Var:metricPath
  Var metricCall = concat(Var:metricDataUrl, Var:metricPath)
  Request metricRequest = new Request(url=Var:metricCall, header=Env:commonHeaders)
  Var:metricRequests.append(Var:metricRequest)
}
Var metrics = execute-parallel(Var:metricRequests)

Var metricsToReturn = []
Var index = 0
Var one = 1
foreach metricArr in Var:metrics {
  foreach metric in Var:metricArr {
    Var metricName = extract(Var:metric,$.metricName)
    Var metricIdentifier =  Env:metricIdentifiers[Var:index]
    if Var:metricName != "METRIC DATA NOT FOUND" {
      Var metricPath = extract(Var:metric,$.metricPath)
      Var metricPathSplit = Var:metricPath.split("|")
      Var txnName = Var:metricPathSplit[2]
      if Env:collectHostData != "true" {
        Var mName = Var:metricPathSplit[3]
        Var metricValues = extract(Var:metric,$.metricValues)
        foreach metricValue in Var:metricValues {
          Var value = extract(Var:metricValue,$.value)
          Var timestamp = extract(Var:metricValue,$.startTimeInMillis)
          Var tsRecord = new TimeseriesRecord(txnName=Var:txnName, metricIdentifier=Var:metricIdentifier, metricName=Var:mName, metricValue=Var:value, timestamp=Var:timestamp)
          Var:metricsToReturn.append(Var:tsRecord)
        }
      }
      if Env:collectHostData == "true" {
        Var mName = Var:metricPathSplit[5]
        Var hostname = Var:metricPathSplit[4]
        Var metricValues = extract(Var:metric,$.metricValues)
        foreach metricValue in Var:metricValues {
          Var value = extract(Var:metricValue,$.value)
          Var timestamp = extract(Var:metricValue,$.startTimeInMillis)
          Var tsRecord = new TimeseriesRecord(txnName=Var:txnName, metricIdentifier=Var:metricIdentifier, metricName=Var:mName, metricValue=Var:value, timestamp=Var:timestamp, host=Var:hostname)
          Var:metricsToReturn.append(Var:tsRecord)
        }
      }
    }
  }
  index = Var:index + Var:one
}
return Var:metricsToReturn
