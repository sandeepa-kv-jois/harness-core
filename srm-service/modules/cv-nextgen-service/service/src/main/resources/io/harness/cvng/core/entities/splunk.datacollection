Var jobsUrl = concat(Env:baseUrl, "services/search/jobs/?output_mode=json&exec_mode=blocking")
Var bodyMap = {}
Var splunkQuery = concat("search ", Env:query)
Var:bodyMap.put("search", Var:splunkQuery)
Var:bodyMap.put("earliest_time", Env:startTimeSeconds)
Var:bodyMap.put("latest_time", Env:endTimeSeconds)
Var job = sync-call(url=Var:jobsUrl, header=Env:commonHeaders, body=Var:bodyMap, bodyType=FORM_URL_ENCODED)
Var jobId = extract(Var:job, $.sid)
sleep(500)
Var resultsUrl = concat(Env:baseUrl, "services/search/jobs/", Var:jobId, "/results?output_mode=json&count=", Env:maxCount)
Var rawResults = sync-call-with-code(url=Var:resultsUrl, header=Env:commonHeaders)
Var respCode = Var:rawResults[1]
Var httpOk = 200
while Var:respCode not equal to Var:httpOk {
  sleep(1000)
  rawResults = sync-call-with-code(url=Var:resultsUrl, header=Env:commonHeaders)
  respCode = Var:rawResults[1]
  sleep(1000)
}
Var resultData = Var:rawResults[0]
Var results = extract(Var:resultData,$.results)
Var logs = []
foreach rawLog in Var:results {
    Var hostname = extract(Var:rawLog, Env:serviceInstanceIdentifier)
    Var log = extract(Var:rawLog, $._raw)
    Var timestamp = extract(Var:rawLog, $._time)
    Var format = "yyyy-MM-dd'T'HH:mm:ss.SSSXXX"
    Var logToReturn = new LogDataRecord(log=Var:log, timestamp=Var:timestamp, timestampFormat=Var:format, host=Var:hostname)
    Var:logs.append(Var:logToReturn)
}
return Var:logs
